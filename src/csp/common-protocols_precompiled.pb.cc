// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common-protocols_precompiled.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common-protocols_precompiled.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AIT {
namespace protocols {
namespace csp {

namespace {

const ::google::protobuf::Descriptor* P_Assignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_Assignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_CompoundAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_CompoundAssignment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2dprotocols_5fprecompiled_2eproto() {
  protobuf_AddDesc_common_2dprotocols_5fprecompiled_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common-protocols_precompiled.proto");
  GOOGLE_CHECK(file != NULL);
  P_Assignment_descriptor_ = file->message_type(0);
  static const int P_Assignment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Assignment, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Assignment, value_),
  };
  P_Assignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_Assignment_descriptor_,
      P_Assignment::default_instance_,
      P_Assignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Assignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Assignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_Assignment));
  P_CompoundAssignment_descriptor_ = file->message_type(1);
  static const int P_CompoundAssignment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CompoundAssignment, assignments_),
  };
  P_CompoundAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_CompoundAssignment_descriptor_,
      P_CompoundAssignment::default_instance_,
      P_CompoundAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CompoundAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CompoundAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_CompoundAssignment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2dprotocols_5fprecompiled_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_Assignment_descriptor_, &P_Assignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_CompoundAssignment_descriptor_, &P_CompoundAssignment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2dprotocols_5fprecompiled_2eproto() {
  delete P_Assignment::default_instance_;
  delete P_Assignment_reflection_;
  delete P_CompoundAssignment::default_instance_;
  delete P_CompoundAssignment_reflection_;
}

void protobuf_AddDesc_common_2dprotocols_5fprecompiled_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"common-protocols_precompiled.proto\022\021AI"
    "T.protocols.csp\"/\n\014P_Assignment\022\020\n\010prior"
    "ity\030\001 \002(\005\022\r\n\005value\030\002 \001(\005\"L\n\024P_CompoundAs"
    "signment\0224\n\013assignments\030\001 \003(\0132\037.AIT.prot"
    "ocols.csp.P_Assignment", 182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common-protocols_precompiled.proto", &protobuf_RegisterTypes);
  P_Assignment::default_instance_ = new P_Assignment();
  P_CompoundAssignment::default_instance_ = new P_CompoundAssignment();
  P_Assignment::default_instance_->InitAsDefaultInstance();
  P_CompoundAssignment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2dprotocols_5fprecompiled_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2dprotocols_5fprecompiled_2eproto {
  StaticDescriptorInitializer_common_2dprotocols_5fprecompiled_2eproto() {
    protobuf_AddDesc_common_2dprotocols_5fprecompiled_2eproto();
  }
} static_descriptor_initializer_common_2dprotocols_5fprecompiled_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int P_Assignment::kPriorityFieldNumber;
const int P_Assignment::kValueFieldNumber;
#endif  // !_MSC_VER

P_Assignment::P_Assignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_Assignment::InitAsDefaultInstance() {
}

P_Assignment::P_Assignment(const P_Assignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_Assignment::SharedCtor() {
  _cached_size_ = 0;
  priority_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_Assignment::~P_Assignment() {
  SharedDtor();
}

void P_Assignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void P_Assignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_Assignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_Assignment_descriptor_;
}

const P_Assignment& P_Assignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2dprotocols_5fprecompiled_2eproto();
  return *default_instance_;
}

P_Assignment* P_Assignment::default_instance_ = NULL;

P_Assignment* P_Assignment::New() const {
  return new P_Assignment;
}

void P_Assignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    priority_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_Assignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 priority = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_Assignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 priority = 1;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->priority(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_Assignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 priority = 1;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->priority(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_Assignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 priority = 1;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_Assignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_Assignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_Assignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_Assignment::MergeFrom(const P_Assignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_Assignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_Assignment::CopyFrom(const P_Assignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_Assignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void P_Assignment::Swap(P_Assignment* other) {
  if (other != this) {
    std::swap(priority_, other->priority_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_Assignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_Assignment_descriptor_;
  metadata.reflection = P_Assignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int P_CompoundAssignment::kAssignmentsFieldNumber;
#endif  // !_MSC_VER

P_CompoundAssignment::P_CompoundAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_CompoundAssignment::InitAsDefaultInstance() {
}

P_CompoundAssignment::P_CompoundAssignment(const P_CompoundAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_CompoundAssignment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_CompoundAssignment::~P_CompoundAssignment() {
  SharedDtor();
}

void P_CompoundAssignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void P_CompoundAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_CompoundAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_CompoundAssignment_descriptor_;
}

const P_CompoundAssignment& P_CompoundAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2dprotocols_5fprecompiled_2eproto();
  return *default_instance_;
}

P_CompoundAssignment* P_CompoundAssignment::default_instance_ = NULL;

P_CompoundAssignment* P_CompoundAssignment::New() const {
  return new P_CompoundAssignment;
}

void P_CompoundAssignment::Clear() {
  assignments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_CompoundAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AIT.protocols.csp.P_Assignment assignments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assignments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_assignments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_CompoundAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AIT.protocols.csp.P_Assignment assignments = 1;
  for (int i = 0; i < this->assignments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assignments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_CompoundAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AIT.protocols.csp.P_Assignment assignments = 1;
  for (int i = 0; i < this->assignments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assignments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_CompoundAssignment::ByteSize() const {
  int total_size = 0;

  // repeated .AIT.protocols.csp.P_Assignment assignments = 1;
  total_size += 1 * this->assignments_size();
  for (int i = 0; i < this->assignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assignments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_CompoundAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_CompoundAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_CompoundAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_CompoundAssignment::MergeFrom(const P_CompoundAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  assignments_.MergeFrom(from.assignments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_CompoundAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_CompoundAssignment::CopyFrom(const P_CompoundAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_CompoundAssignment::IsInitialized() const {

  for (int i = 0; i < assignments_size(); i++) {
    if (!this->assignments(i).IsInitialized()) return false;
  }
  return true;
}

void P_CompoundAssignment::Swap(P_CompoundAssignment* other) {
  if (other != this) {
    assignments_.Swap(&other->assignments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_CompoundAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_CompoundAssignment_descriptor_;
  metadata.reflection = P_CompoundAssignment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace csp
}  // namespace protocols
}  // namespace AIT

// @@protoc_insertion_point(global_scope)
