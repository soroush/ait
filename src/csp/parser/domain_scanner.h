// Generated by Flexc++ V0.98.00 on Fri, 19 Jul 2013 00:56:02 +0430

#ifndef DomainLexer_H_INCLUDED_
#define DomainLexer_H_INCLUDED_

// $insert baseclass_h
#include "domain_scannerbase.h"


// $insert classHead
class DomainLexer: public DomainLexerBase
{
    public:
        explicit DomainLexer(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        DomainLexer(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts
};

// $insert scannerConstructors
inline DomainLexer::DomainLexer(std::istream &in, std::ostream &out)
:
    DomainLexerBase(in, out)
{}

inline DomainLexer::DomainLexer(std::string const &infile, std::string const &outfile)
:
    DomainLexerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int DomainLexer::lex()
{
    return lex__();
}

inline void DomainLexer::preCode() 
{
    // optionally replace by your own code
}

inline void DomainLexer::print() 
{
    print__();
}


#endif // DomainLexer_H_INCLUDED_

