// Generated by Bisonc++ V2.09.03 on Tue, 23 Jul 2013 10:23:55 +0430

#ifndef ConstraintParametersParser_h_included
#define ConstraintParametersParser_h_included

#include <map>
#include <sstream>
#include <vector>

#include "constraint-parameters_parserbase.h"
#include "constraint-parameters_scanner.h"
#include "../variable.h"
#include "../csp-problem.h"

#undef ConstraintParametersParser
class ConstraintParametersParser: public ConstraintParametersParserBase {
public:
	enum class ParserMode {
		Scope, Parameter
	};
	ConstraintParametersParser(const std::string& input,
			const AIT::CSP::CSP_Problem* problem,
			std::vector<AIT::CSP::Variable*>& output);
	ConstraintParametersParser(const std::string& input,
			const AIT::CSP::CSP_Problem* problem, std::vector<int*>& output);
	int parse();

private:
	std::istringstream str;
	ConstraintParametersLexer d_scanner;
	const AIT::CSP::CSP_Problem* problem;
	std::vector<AIT::CSP::Variable*>* scope;
	std::vector<int*>* parameters;
	ParserMode mode;

	void error(char const *msg);
	int lex();
	void print();
	void executeAction(int ruleNr);
	void errorRecovery();
	int lookup(bool recovery);
	void nextToken();
};

inline ConstraintParametersParser::ConstraintParametersParser(
		const std::string& input, const AIT::CSP::CSP_Problem* problem_,
		std::vector<AIT::CSP::Variable*>& output) :
		str(input), problem(problem_), scope(&output), parameters(nullptr), mode(
				ParserMode::Scope) {
}

inline ConstraintParametersParser::ConstraintParametersParser(
		const std::string& input, const AIT::CSP::CSP_Problem* problem_,
		std::vector<int*>& output) :
		str(input), problem(problem_), scope(nullptr), parameters(&output), mode(
				ParserMode::Parameter) {
}

inline void ConstraintParametersParser::error(char const *msg) {
	std::cerr << msg << '\n';
}

inline int ConstraintParametersParser::lex() {
	return d_scanner.lex();
}

inline void ConstraintParametersParser::print() {
}

#endif
