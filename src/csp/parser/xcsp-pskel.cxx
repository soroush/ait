// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "xcsp-pskel.hxx"

// presentation_t_pskel
//

void presentation_t_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void presentation_t_pskel::
maxConstraintArity_parser (::xml_schema::string_pskel& p)
{
  this->maxConstraintArity_parser_ = &p;
}

void presentation_t_pskel::
minViolatedConstraints_parser (::xml_schema::string_pskel& p)
{
  this->minViolatedConstraints_parser_ = &p;
}

void presentation_t_pskel::
nbSolutions_parser (::xml_schema::string_pskel& p)
{
  this->nbSolutions_parser_ = &p;
}

void presentation_t_pskel::
solution_parser (::xml_schema::string_pskel& p)
{
  this->solution_parser_ = &p;
}

void presentation_t_pskel::
type_parser (::problemType_pskel& p)
{
  this->type_parser_ = &p;
}

void presentation_t_pskel::
format_parser (::xml_schema::string_pskel& p)
{
  this->format_parser_ = &p;
}

void presentation_t_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::string_pskel& maxConstraintArity,
         ::xml_schema::string_pskel& minViolatedConstraints,
         ::xml_schema::string_pskel& nbSolutions,
         ::xml_schema::string_pskel& solution,
         ::problemType_pskel& type,
         ::xml_schema::string_pskel& format)
{
  this->name_parser_ = &name;
  this->maxConstraintArity_parser_ = &maxConstraintArity;
  this->minViolatedConstraints_parser_ = &minViolatedConstraints;
  this->nbSolutions_parser_ = &nbSolutions;
  this->solution_parser_ = &solution;
  this->type_parser_ = &type;
  this->format_parser_ = &format;
}

presentation_t_pskel::
presentation_t_pskel ()
: name_parser_ (0),
  maxConstraintArity_parser_ (0),
  minViolatedConstraints_parser_ (0),
  nbSolutions_parser_ (0),
  solution_parser_ (0),
  type_parser_ (0),
  format_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// domain_t_pskel
//

void domain_t_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void domain_t_pskel::
nbValues_parser (::xml_schema::positive_integer_pskel& p)
{
  this->nbValues_parser_ = &p;
}

void domain_t_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::positive_integer_pskel& nbValues)
{
  this->name_parser_ = &name;
  this->nbValues_parser_ = &nbValues;
}

domain_t_pskel::
domain_t_pskel ()
: name_parser_ (0),
  nbValues_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// domains_t_pskel
//

void domains_t_pskel::
domain_parser (::domain_t_pskel& p)
{
  this->domain_parser_ = &p;
}

void domains_t_pskel::
nbDomains_parser (::xml_schema::positive_integer_pskel& p)
{
  this->nbDomains_parser_ = &p;
}

void domains_t_pskel::
parsers (::domain_t_pskel& domain,
         ::xml_schema::positive_integer_pskel& nbDomains)
{
  this->domain_parser_ = &domain;
  this->nbDomains_parser_ = &nbDomains;
}

domains_t_pskel::
domains_t_pskel ()
: domain_parser_ (0),
  nbDomains_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// variable_t_pskel
//

void variable_t_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void variable_t_pskel::
domain_parser (::xml_schema::string_pskel& p)
{
  this->domain_parser_ = &p;
}

void variable_t_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::string_pskel& domain)
{
  this->name_parser_ = &name;
  this->domain_parser_ = &domain;
}

variable_t_pskel::
variable_t_pskel ()
: name_parser_ (0),
  domain_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// variables_t_pskel
//

void variables_t_pskel::
variable_parser (::variable_t_pskel& p)
{
  this->variable_parser_ = &p;
}

void variables_t_pskel::
nbVariables_parser (::xml_schema::positive_integer_pskel& p)
{
  this->nbVariables_parser_ = &p;
}

void variables_t_pskel::
parsers (::variable_t_pskel& variable,
         ::xml_schema::positive_integer_pskel& nbVariables)
{
  this->variable_parser_ = &variable;
  this->nbVariables_parser_ = &nbVariables;
}

variables_t_pskel::
variables_t_pskel ()
: variable_parser_ (0),
  nbVariables_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// relation_t_pskel
//

void relation_t_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void relation_t_pskel::
arity_parser (::xml_schema::positive_integer_pskel& p)
{
  this->arity_parser_ = &p;
}

void relation_t_pskel::
nbTuples_parser (::xml_schema::positive_integer_pskel& p)
{
  this->nbTuples_parser_ = &p;
}

void relation_t_pskel::
semantics_parser (::semanticsType_pskel& p)
{
  this->semantics_parser_ = &p;
}

void relation_t_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::positive_integer_pskel& arity,
         ::xml_schema::positive_integer_pskel& nbTuples,
         ::semanticsType_pskel& semantics)
{
  this->name_parser_ = &name;
  this->arity_parser_ = &arity;
  this->nbTuples_parser_ = &nbTuples;
  this->semantics_parser_ = &semantics;
}

relation_t_pskel::
relation_t_pskel ()
: name_parser_ (0),
  arity_parser_ (0),
  nbTuples_parser_ (0),
  semantics_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// relations_t_pskel
//

void relations_t_pskel::
relation_parser (::relation_t_pskel& p)
{
  this->relation_parser_ = &p;
}

void relations_t_pskel::
nbDomains_parser (::xml_schema::positive_integer_pskel& p)
{
  this->nbDomains_parser_ = &p;
}

void relations_t_pskel::
nbRelations_parser (::xml_schema::positive_integer_pskel& p)
{
  this->nbRelations_parser_ = &p;
}

void relations_t_pskel::
parsers (::relation_t_pskel& relation,
         ::xml_schema::positive_integer_pskel& nbDomains,
         ::xml_schema::positive_integer_pskel& nbRelations)
{
  this->relation_parser_ = &relation;
  this->nbDomains_parser_ = &nbDomains;
  this->nbRelations_parser_ = &nbRelations;
}

relations_t_pskel::
relations_t_pskel ()
: relation_parser_ (0),
  nbDomains_parser_ (0),
  nbRelations_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// expression_t_pskel
//

void expression_t_pskel::
functional_parser (::xml_schema::string_pskel& p)
{
  this->functional_parser_ = &p;
}

void expression_t_pskel::
math_parser (::xml_schema::string_pskel& p)
{
  this->math_parser_ = &p;
}

void expression_t_pskel::
postfix_parser (::xml_schema::string_pskel& p)
{
  this->postfix_parser_ = &p;
}

void expression_t_pskel::
infix_parser (::xml_schema::string_pskel& p)
{
  this->infix_parser_ = &p;
}

void expression_t_pskel::
parsers (::xml_schema::string_pskel& functional,
         ::xml_schema::string_pskel& math,
         ::xml_schema::string_pskel& postfix,
         ::xml_schema::string_pskel& infix)
{
  this->functional_parser_ = &functional;
  this->math_parser_ = &math;
  this->postfix_parser_ = &postfix;
  this->infix_parser_ = &infix;
}

expression_t_pskel::
expression_t_pskel ()
: functional_parser_ (0),
  math_parser_ (0),
  postfix_parser_ (0),
  infix_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_all_count_ (4UL, v_all_first_)
{
}

// predicate_t_pskel
//

void predicate_t_pskel::
parameters_parser (::xml_schema::string_pskel& p)
{
  this->parameters_parser_ = &p;
}

void predicate_t_pskel::
expression_parser (::expression_t_pskel& p)
{
  this->expression_parser_ = &p;
}

void predicate_t_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void predicate_t_pskel::
parsers (::xml_schema::string_pskel& parameters,
         ::expression_t_pskel& expression,
         ::xml_schema::string_pskel& name)
{
  this->parameters_parser_ = &parameters;
  this->expression_parser_ = &expression;
  this->name_parser_ = &name;
}

predicate_t_pskel::
predicate_t_pskel ()
: parameters_parser_ (0),
  expression_parser_ (0),
  name_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// predicates_t_pskel
//

void predicates_t_pskel::
predicate_parser (::predicate_t_pskel& p)
{
  this->predicate_parser_ = &p;
}

void predicates_t_pskel::
nbPredicates_parser (::xml_schema::positive_integer_pskel& p)
{
  this->nbPredicates_parser_ = &p;
}

void predicates_t_pskel::
parsers (::predicate_t_pskel& predicate,
         ::xml_schema::positive_integer_pskel& nbPredicates)
{
  this->predicate_parser_ = &predicate;
  this->nbPredicates_parser_ = &nbPredicates;
}

predicates_t_pskel::
predicates_t_pskel ()
: predicate_parser_ (0),
  nbPredicates_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// constraint_t_pskel
//

void constraint_t_pskel::
parameters_parser (::xml_schema::string_pskel& p)
{
  this->parameters_parser_ = &p;
}

void constraint_t_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void constraint_t_pskel::
scope_parser (::xml_schema::string_pskel& p)
{
  this->scope_parser_ = &p;
}

void constraint_t_pskel::
reference_parser (::xml_schema::string_pskel& p)
{
  this->reference_parser_ = &p;
}

void constraint_t_pskel::
arity_parser (::xml_schema::string_pskel& p)
{
  this->arity_parser_ = &p;
}

void constraint_t_pskel::
parsers (::xml_schema::string_pskel& parameters,
         ::xml_schema::string_pskel& name,
         ::xml_schema::string_pskel& scope,
         ::xml_schema::string_pskel& reference,
         ::xml_schema::string_pskel& arity)
{
  this->parameters_parser_ = &parameters;
  this->name_parser_ = &name;
  this->scope_parser_ = &scope;
  this->reference_parser_ = &reference;
  this->arity_parser_ = &arity;
}

constraint_t_pskel::
constraint_t_pskel ()
: parameters_parser_ (0),
  name_parser_ (0),
  scope_parser_ (0),
  reference_parser_ (0),
  arity_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// constraints_t_pskel
//

void constraints_t_pskel::
constraint_parser (::constraint_t_pskel& p)
{
  this->constraint_parser_ = &p;
}

void constraints_t_pskel::
nbConstraints_parser (::xml_schema::positive_integer_pskel& p)
{
  this->nbConstraints_parser_ = &p;
}

void constraints_t_pskel::
parsers (::constraint_t_pskel& constraint,
         ::xml_schema::positive_integer_pskel& nbConstraints)
{
  this->constraint_parser_ = &constraint;
  this->nbConstraints_parser_ = &nbConstraints;
}

constraints_t_pskel::
constraints_t_pskel ()
: constraint_parser_ (0),
  nbConstraints_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// instance_t_pskel
//

void instance_t_pskel::
presentation_parser (::presentation_t_pskel& p)
{
  this->presentation_parser_ = &p;
}

void instance_t_pskel::
domains_parser (::domains_t_pskel& p)
{
  this->domains_parser_ = &p;
}

void instance_t_pskel::
variables_parser (::variables_t_pskel& p)
{
  this->variables_parser_ = &p;
}

void instance_t_pskel::
relations_parser (::relations_t_pskel& p)
{
  this->relations_parser_ = &p;
}

void instance_t_pskel::
predicates_parser (::predicates_t_pskel& p)
{
  this->predicates_parser_ = &p;
}

void instance_t_pskel::
constraints_parser (::constraints_t_pskel& p)
{
  this->constraints_parser_ = &p;
}

void instance_t_pskel::
parsers (::presentation_t_pskel& presentation,
         ::domains_t_pskel& domains,
         ::variables_t_pskel& variables,
         ::relations_t_pskel& relations,
         ::predicates_t_pskel& predicates,
         ::constraints_t_pskel& constraints)
{
  this->presentation_parser_ = &presentation;
  this->domains_parser_ = &domains;
  this->variables_parser_ = &variables;
  this->relations_parser_ = &relations;
  this->predicates_parser_ = &predicates;
  this->constraints_parser_ = &constraints;
}

instance_t_pskel::
instance_t_pskel ()
: presentation_parser_ (0),
  domains_parser_ (0),
  variables_parser_ (0),
  relations_parser_ (0),
  predicates_parser_ (0),
  constraints_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// problemType_pskel
//

void problemType_pskel::
post_problemType ()
{
}

// semanticsType_pskel
//

void semanticsType_pskel::
post_semanticsType ()
{
}

// presentation_t_pskel
//

void presentation_t_pskel::
name (const ::std::string&)
{
}

void presentation_t_pskel::
maxConstraintArity (const ::std::string&)
{
}

void presentation_t_pskel::
minViolatedConstraints (const ::std::string&)
{
}

void presentation_t_pskel::
nbSolutions (const ::std::string&)
{
}

void presentation_t_pskel::
solution (const ::std::string&)
{
}

void presentation_t_pskel::
type ()
{
}

void presentation_t_pskel::
format (const ::std::string&)
{
}

void presentation_t_pskel::
post_presentation_t ()
{
}

// domain_t_pskel
//

void domain_t_pskel::
name (const ::std::string&)
{
}

void domain_t_pskel::
nbValues (unsigned long long)
{
}

// domains_t_pskel
//

void domains_t_pskel::
domain (AIT::CSP::Domain)
{
}

void domains_t_pskel::
nbDomains (unsigned long long)
{
}

// variable_t_pskel
//

void variable_t_pskel::
name (const ::std::string&)
{
}

void variable_t_pskel::
domain (const ::std::string&)
{
}

// variables_t_pskel
//

void variables_t_pskel::
variable (AIT::CSP::Variable)
{
}

void variables_t_pskel::
nbVariables (unsigned long long)
{
}

// relation_t_pskel
//

void relation_t_pskel::
name (const ::std::string&)
{
}

void relation_t_pskel::
arity (unsigned long long)
{
}

void relation_t_pskel::
nbTuples (unsigned long long)
{
}

void relation_t_pskel::
semantics ()
{
}

void relation_t_pskel::
post_relation_t ()
{
}

// relations_t_pskel
//

void relations_t_pskel::
relation ()
{
}

void relations_t_pskel::
nbDomains (unsigned long long)
{
}

void relations_t_pskel::
nbRelations (unsigned long long)
{
}

void relations_t_pskel::
post_relations_t ()
{
}

// expression_t_pskel
//

void expression_t_pskel::
functional (const ::std::string&)
{
}

void expression_t_pskel::
math (const ::std::string&)
{
}

void expression_t_pskel::
postfix (const ::std::string&)
{
}

void expression_t_pskel::
infix (const ::std::string&)
{
}

void expression_t_pskel::
post_expression_t ()
{
}

// predicate_t_pskel
//

void predicate_t_pskel::
parameters (const ::std::string&)
{
}

void predicate_t_pskel::
expression ()
{
}

void predicate_t_pskel::
name (const ::std::string&)
{
}

// predicates_t_pskel
//

void predicates_t_pskel::
predicate (AIT::CSP::Predicate)
{
}

void predicates_t_pskel::
nbPredicates (unsigned long long)
{
}

void predicates_t_pskel::
post_predicates_t ()
{
}

// constraint_t_pskel
//

void constraint_t_pskel::
parameters (const ::std::string&)
{
}

void constraint_t_pskel::
name (const ::std::string&)
{
}

void constraint_t_pskel::
scope (const ::std::string&)
{
}

void constraint_t_pskel::
reference (const ::std::string&)
{
}

void constraint_t_pskel::
arity (const ::std::string&)
{
}

// constraints_t_pskel
//

void constraints_t_pskel::
constraint (AIT::CSP::Constraint)
{
}

void constraints_t_pskel::
nbConstraints (unsigned long long)
{
}

void constraints_t_pskel::
post_constraints_t ()
{
}

// instance_t_pskel
//

void instance_t_pskel::
presentation ()
{
}

void instance_t_pskel::
domains (std::forward_list<AIT::CSP::Domain>)
{
}

void instance_t_pskel::
variables (std::forward_list<AIT::CSP::Variable>)
{
}

void instance_t_pskel::
relations ()
{
}

void instance_t_pskel::
predicates ()
{
}

void instance_t_pskel::
constraints ()
{
}

void instance_t_pskel::
post_instance_t ()
{
}

#include <cassert>

// Element validation and dispatch functions for domains_t_pskel.
//
bool domains_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "domain" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &domains_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "domain",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool domains_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void domains_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void domains_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "domain");

  this->v_state_stack_.pop ();
}

void domains_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "domain" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->domain_parser_;

          if (this->domain_parser_)
            this->domain_parser_->pre ();
        }
        else
        {
          if (this->domain_parser_)
          {
            AIT::CSP::Domain tmp (this->domain_parser_->post_domain_t ());
            this->domain (std::move(tmp));
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "domain",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for variables_t_pskel.
//
bool variables_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "variable" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &variables_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "variable",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool variables_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void variables_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void variables_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "variable");

  this->v_state_stack_.pop ();
}

void variables_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "variable" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->variable_parser_;

          if (this->variable_parser_)
            this->variable_parser_->pre ();
        }
        else
        {
          if (this->variable_parser_)
          {
            AIT::CSP::Variable tmp (this->variable_parser_->post_variable_t ());
            this->variable (std::move(tmp));
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "variable",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for relations_t_pskel.
//
bool relations_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "relation" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &relations_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "relation",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool relations_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void relations_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void relations_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "relation");

  this->v_state_stack_.pop ();
}

void relations_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "relation" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->relation_parser_;

          if (this->relation_parser_)
            this->relation_parser_->pre ();
        }
        else
        {
          if (this->relation_parser_)
          {
            this->relation_parser_->post_relation_t ();
            this->relation ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "relation",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for expression_t_pskel.
//
bool expression_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

  if (vd->state != ~0UL)
    vd->count++;
  else
    return false;

  return true;
}

bool expression_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

  return true;
}

void expression_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_all_count_.push ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void expression_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.count != 0)
  {
    ::xml_schema::ro_string empty;
    all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
  }


  vs.size--;
  v_all_count_.pop ();

  this->v_state_stack_.pop ();
}

void expression_t_pskel::
all_0 (unsigned long& state,
       unsigned char* count,
       const ::xml_schema::ro_string& ns,
       const ::xml_schema::ro_string& n,
       const ::xml_schema::ro_string* t,
       bool start)
{
  XSD_UNUSED (t);

  if (n == "functional" && ns.empty ())
  {
    if (count[0UL] == 0)
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->functional_parser_;

        if (this->functional_parser_)
          this->functional_parser_->pre ();
      }
      else
      {
        if (this->functional_parser_)
        {
          const ::std::string& tmp (this->functional_parser_->post_string ());
          this->functional (tmp);
        }

        count[0UL] = 1;
      }
    }
    else
    {
      assert (start);
      state = ~0UL;
    }
  }
  else if (n == "math" && ns.empty ())
  {
    if (count[1UL] == 0)
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->math_parser_;

        if (this->math_parser_)
          this->math_parser_->pre ();
      }
      else
      {
        if (this->math_parser_)
        {
          const ::std::string& tmp (this->math_parser_->post_string ());
          this->math (tmp);
        }

        count[1UL] = 1;
      }
    }
    else
    {
      assert (start);
      state = ~0UL;
    }
  }
  else if (n == "postfix" && ns.empty ())
  {
    if (count[2UL] == 0)
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->postfix_parser_;

        if (this->postfix_parser_)
          this->postfix_parser_->pre ();
      }
      else
      {
        if (this->postfix_parser_)
        {
          const ::std::string& tmp (this->postfix_parser_->post_string ());
          this->postfix (tmp);
        }

        count[2UL] = 1;
      }
    }
    else
    {
      assert (start);
      state = ~0UL;
    }
  }
  else if (n == "infix" && ns.empty ())
  {
    if (count[3UL] == 0)
    {
      if (start)
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->infix_parser_;

        if (this->infix_parser_)
          this->infix_parser_->pre ();
      }
      else
      {
        if (this->infix_parser_)
        {
          const ::std::string& tmp (this->infix_parser_->post_string ());
          this->infix (tmp);
        }

        count[3UL] = 1;
      }
    }
    else
    {
      assert (start);
      state = ~0UL;
    }
  }
  else if (n.empty () && ns.empty ())
  {
    state = ~0UL;
  }
  else
    state = ~0UL;
}

// Element validation and dispatch functions for predicate_t_pskel.
//
bool predicate_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "parameters" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &predicate_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "parameters",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool predicate_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void predicate_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void predicate_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "parameters");

  this->v_state_stack_.pop ();
}

void predicate_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "parameters" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->parameters_parser_;

          if (this->parameters_parser_)
            this->parameters_parser_->pre ();
        }
        else
        {
          if (this->parameters_parser_)
          {
            const ::std::string& tmp (this->parameters_parser_->post_string ());
            this->parameters (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "parameters",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "expression" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->expression_parser_;

          if (this->expression_parser_)
            this->expression_parser_->pre ();
        }
        else
        {
          if (this->expression_parser_)
          {
            this->expression_parser_->post_expression_t ();
            this->expression ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "expression",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for predicates_t_pskel.
//
bool predicates_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "predicate" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &predicates_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "predicate",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool predicates_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void predicates_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void predicates_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "predicate");

  this->v_state_stack_.pop ();
}

void predicates_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "predicate" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->predicate_parser_;

          if (this->predicate_parser_)
            this->predicate_parser_->pre ();
        }
        else
        {
          if (this->predicate_parser_)
          {
            AIT::CSP::Predicate tmp (this->predicate_parser_->post_predicate_t ());
            this->predicate (std::move(tmp));
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "predicate",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for constraint_t_pskel.
//
bool constraint_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "parameters" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &constraint_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool constraint_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void constraint_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void constraint_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void constraint_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "parameters" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->parameters_parser_;

          if (this->parameters_parser_)
            this->parameters_parser_->pre ();
        }
        else
        {
          if (this->parameters_parser_)
          {
            const ::std::string& tmp (this->parameters_parser_->post_string ());
            this->parameters (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for constraints_t_pskel.
//
bool constraints_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "constraint" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &constraints_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "constraint",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool constraints_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void constraints_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void constraints_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "constraint");

  this->v_state_stack_.pop ();
}

void constraints_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "constraint" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->constraint_parser_;

          if (this->constraint_parser_)
            this->constraint_parser_->pre ();
        }
        else
        {
          if (this->constraint_parser_)
          {
            AIT::CSP::Constraint tmp (this->constraint_parser_->post_constraint_t ());
            this->constraint (std::move(tmp));
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "constraint",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for instance_t_pskel.
//
bool instance_t_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "presentation" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &instance_t_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "presentation",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool instance_t_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void instance_t_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void instance_t_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "presentation");

  this->v_state_stack_.pop ();
}

void instance_t_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "presentation" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->presentation_parser_;

          if (this->presentation_parser_)
            this->presentation_parser_->pre ();
        }
        else
        {
          if (this->presentation_parser_)
          {
            this->presentation_parser_->post_presentation_t ();
            this->presentation ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "presentation",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "domains" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->domains_parser_;

          if (this->domains_parser_)
            this->domains_parser_->pre ();
        }
        else
        {
          if (this->domains_parser_)
          {
            std::forward_list<AIT::CSP::Domain> tmp (this->domains_parser_->post_domains_t ());
            this->domains (std::move(tmp));
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "domains",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "variables" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->variables_parser_;

          if (this->variables_parser_)
            this->variables_parser_->pre ();
        }
        else
        {
          if (this->variables_parser_)
          {
            std::forward_list<AIT::CSP::Variable> tmp (this->variables_parser_->post_variables_t ());
            this->variables (std::move(tmp));
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "variables",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "relations" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->relations_parser_;

          if (this->relations_parser_)
            this->relations_parser_->pre ();
        }
        else
        {
          if (this->relations_parser_)
          {
            this->relations_parser_->post_relations_t ();
            this->relations ();
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if (n == "predicates" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->predicates_parser_;

          if (this->predicates_parser_)
            this->predicates_parser_->pre ();
        }
        else
        {
          if (this->predicates_parser_)
          {
            this->predicates_parser_->post_predicates_t ();
            this->predicates ();
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if (n == "constraints" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->constraints_parser_;

          if (this->constraints_parser_)
            this->constraints_parser_->pre ();
        }
        else
        {
          if (this->constraints_parser_)
          {
            this->constraints_parser_->post_constraints_t ();
            this->constraints ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "constraints",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Attribute validation and dispatch functions for presentation_t_pskel.
//
bool presentation_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
    {
      this->name_parser_->pre ();
      this->name_parser_->_pre_impl ();
      this->name_parser_->_characters (s);
      this->name_parser_->_post_impl ();
      const ::std::string& tmp (this->name_parser_->post_string ());
      this->name (tmp);
    }

    return true;
  }

  if (n == "maxConstraintArity" && ns.empty ())
  {
    if (this->maxConstraintArity_parser_)
    {
      this->maxConstraintArity_parser_->pre ();
      this->maxConstraintArity_parser_->_pre_impl ();
      this->maxConstraintArity_parser_->_characters (s);
      this->maxConstraintArity_parser_->_post_impl ();
      const ::std::string& tmp (this->maxConstraintArity_parser_->post_string ());
      this->maxConstraintArity (tmp);
    }

    return true;
  }

  if (n == "minViolatedConstraints" && ns.empty ())
  {
    if (this->minViolatedConstraints_parser_)
    {
      this->minViolatedConstraints_parser_->pre ();
      this->minViolatedConstraints_parser_->_pre_impl ();
      this->minViolatedConstraints_parser_->_characters (s);
      this->minViolatedConstraints_parser_->_post_impl ();
      const ::std::string& tmp (this->minViolatedConstraints_parser_->post_string ());
      this->minViolatedConstraints (tmp);
    }

    return true;
  }

  if (n == "nbSolutions" && ns.empty ())
  {
    if (this->nbSolutions_parser_)
    {
      this->nbSolutions_parser_->pre ();
      this->nbSolutions_parser_->_pre_impl ();
      this->nbSolutions_parser_->_characters (s);
      this->nbSolutions_parser_->_post_impl ();
      const ::std::string& tmp (this->nbSolutions_parser_->post_string ());
      this->nbSolutions (tmp);
    }

    return true;
  }

  if (n == "solution" && ns.empty ())
  {
    if (this->solution_parser_)
    {
      this->solution_parser_->pre ();
      this->solution_parser_->_pre_impl ();
      this->solution_parser_->_characters (s);
      this->solution_parser_->_post_impl ();
      const ::std::string& tmp (this->solution_parser_->post_string ());
      this->solution (tmp);
    }

    return true;
  }

  if (n == "type" && ns.empty ())
  {
    if (this->type_parser_)
    {
      this->type_parser_->pre ();
      this->type_parser_->_pre_impl ();
      this->type_parser_->_characters (s);
      this->type_parser_->_post_impl ();
      this->type_parser_->post_problemType ();
      this->type ();
    }

    return true;
  }

  if (n == "format" && ns.empty ())
  {
    if (this->format_parser_)
    {
      this->format_parser_->pre ();
      this->format_parser_->_pre_impl ();
      this->format_parser_->_characters (s);
      this->format_parser_->_post_impl ();
      const ::std::string& tmp (this->format_parser_->post_string ());
      this->format (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->format = true;
    return true;
  }

  return false;
}

void presentation_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.format = false;
}

void presentation_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.format)
    this->_expected_attribute (
      "", "format");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for domain_t_pskel.
//
bool domain_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
    {
      this->name_parser_->pre ();
      this->name_parser_->_pre_impl ();
      this->name_parser_->_characters (s);
      this->name_parser_->_post_impl ();
      const ::std::string& tmp (this->name_parser_->post_string ());
      this->name (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
    return true;
  }

  if (n == "nbValues" && ns.empty ())
  {
    if (this->nbValues_parser_)
    {
      this->nbValues_parser_->pre ();
      this->nbValues_parser_->_pre_impl ();
      this->nbValues_parser_->_characters (s);
      this->nbValues_parser_->_post_impl ();
      unsigned long long tmp (this->nbValues_parser_->post_positive_integer ());
      this->nbValues (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->nbValues = true;
    return true;
  }

  return this->::xml_schema::string_pskel::_attribute_impl_phase_one (ns, n, s);
}

void domain_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.name = false;
  as.nbValues = false;
  this->::xml_schema::string_pskel::_pre_a_validate ();
}

void domain_t_pskel::
_post_a_validate ()
{
  this->::xml_schema::string_pskel::_post_a_validate ();

  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.name)
    this->_expected_attribute (
      "", "name");
  if (!as.nbValues)
    this->_expected_attribute (
      "", "nbValues");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for domains_t_pskel.
//
bool domains_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "nbDomains" && ns.empty ())
  {
    if (this->nbDomains_parser_)
    {
      this->nbDomains_parser_->pre ();
      this->nbDomains_parser_->_pre_impl ();
      this->nbDomains_parser_->_characters (s);
      this->nbDomains_parser_->_post_impl ();
      unsigned long long tmp (this->nbDomains_parser_->post_positive_integer ());
      this->nbDomains (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->nbDomains = true;
    return true;
  }

  return false;
}

void domains_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.nbDomains = false;
}

void domains_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.nbDomains)
    this->_expected_attribute (
      "", "nbDomains");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for variable_t_pskel.
//
bool variable_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
    {
      this->name_parser_->pre ();
      this->name_parser_->_pre_impl ();
      this->name_parser_->_characters (s);
      this->name_parser_->_post_impl ();
      const ::std::string& tmp (this->name_parser_->post_string ());
      this->name (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
    return true;
  }

  if (n == "domain" && ns.empty ())
  {
    if (this->domain_parser_)
    {
      this->domain_parser_->pre ();
      this->domain_parser_->_pre_impl ();
      this->domain_parser_->_characters (s);
      this->domain_parser_->_post_impl ();
      const ::std::string& tmp (this->domain_parser_->post_string ());
      this->domain (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->domain = true;
    return true;
  }

  return false;
}

void variable_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.name = false;
  as.domain = false;
}

void variable_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.name)
    this->_expected_attribute (
      "", "name");
  if (!as.domain)
    this->_expected_attribute (
      "", "domain");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for variables_t_pskel.
//
bool variables_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "nbVariables" && ns.empty ())
  {
    if (this->nbVariables_parser_)
    {
      this->nbVariables_parser_->pre ();
      this->nbVariables_parser_->_pre_impl ();
      this->nbVariables_parser_->_characters (s);
      this->nbVariables_parser_->_post_impl ();
      unsigned long long tmp (this->nbVariables_parser_->post_positive_integer ());
      this->nbVariables (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->nbVariables = true;
    return true;
  }

  return false;
}

void variables_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.nbVariables = false;
}

void variables_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.nbVariables)
    this->_expected_attribute (
      "", "nbVariables");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for relation_t_pskel.
//
bool relation_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
    {
      this->name_parser_->pre ();
      this->name_parser_->_pre_impl ();
      this->name_parser_->_characters (s);
      this->name_parser_->_post_impl ();
      const ::std::string& tmp (this->name_parser_->post_string ());
      this->name (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
    return true;
  }

  if (n == "arity" && ns.empty ())
  {
    if (this->arity_parser_)
    {
      this->arity_parser_->pre ();
      this->arity_parser_->_pre_impl ();
      this->arity_parser_->_characters (s);
      this->arity_parser_->_post_impl ();
      unsigned long long tmp (this->arity_parser_->post_positive_integer ());
      this->arity (tmp);
    }

    return true;
  }

  if (n == "nbTuples" && ns.empty ())
  {
    if (this->nbTuples_parser_)
    {
      this->nbTuples_parser_->pre ();
      this->nbTuples_parser_->_pre_impl ();
      this->nbTuples_parser_->_characters (s);
      this->nbTuples_parser_->_post_impl ();
      unsigned long long tmp (this->nbTuples_parser_->post_positive_integer ());
      this->nbTuples (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->nbTuples = true;
    return true;
  }

  if (n == "semantics" && ns.empty ())
  {
    if (this->semantics_parser_)
    {
      this->semantics_parser_->pre ();
      this->semantics_parser_->_pre_impl ();
      this->semantics_parser_->_characters (s);
      this->semantics_parser_->_post_impl ();
      this->semantics_parser_->post_semanticsType ();
      this->semantics ();
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->semantics = true;
    return true;
  }

  return this->::xml_schema::string_pskel::_attribute_impl_phase_one (ns, n, s);
}

void relation_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.name = false;
  as.nbTuples = false;
  as.semantics = false;
  this->::xml_schema::string_pskel::_pre_a_validate ();
}

void relation_t_pskel::
_post_a_validate ()
{
  this->::xml_schema::string_pskel::_post_a_validate ();

  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.name)
    this->_expected_attribute (
      "", "name");
  if (!as.nbTuples)
    this->_expected_attribute (
      "", "nbTuples");
  if (!as.semantics)
    this->_expected_attribute (
      "", "semantics");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for relations_t_pskel.
//
bool relations_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "nbDomains" && ns.empty ())
  {
    if (this->nbDomains_parser_)
    {
      this->nbDomains_parser_->pre ();
      this->nbDomains_parser_->_pre_impl ();
      this->nbDomains_parser_->_characters (s);
      this->nbDomains_parser_->_post_impl ();
      unsigned long long tmp (this->nbDomains_parser_->post_positive_integer ());
      this->nbDomains (tmp);
    }

    return true;
  }

  if (n == "nbRelations" && ns.empty ())
  {
    if (this->nbRelations_parser_)
    {
      this->nbRelations_parser_->pre ();
      this->nbRelations_parser_->_pre_impl ();
      this->nbRelations_parser_->_characters (s);
      this->nbRelations_parser_->_post_impl ();
      unsigned long long tmp (this->nbRelations_parser_->post_positive_integer ());
      this->nbRelations (tmp);
    }

    return true;
  }

  return false;
}

// Attribute validation and dispatch functions for predicate_t_pskel.
//
bool predicate_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
    {
      this->name_parser_->pre ();
      this->name_parser_->_pre_impl ();
      this->name_parser_->_characters (s);
      this->name_parser_->_post_impl ();
      const ::std::string& tmp (this->name_parser_->post_string ());
      this->name (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
    return true;
  }

  return false;
}

void predicate_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.name = false;
}

void predicate_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.name)
    this->_expected_attribute (
      "", "name");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for predicates_t_pskel.
//
bool predicates_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "nbPredicates" && ns.empty ())
  {
    if (this->nbPredicates_parser_)
    {
      this->nbPredicates_parser_->pre ();
      this->nbPredicates_parser_->_pre_impl ();
      this->nbPredicates_parser_->_characters (s);
      this->nbPredicates_parser_->_post_impl ();
      unsigned long long tmp (this->nbPredicates_parser_->post_positive_integer ());
      this->nbPredicates (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->nbPredicates = true;
    return true;
  }

  return false;
}

void predicates_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.nbPredicates = false;
}

void predicates_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.nbPredicates)
    this->_expected_attribute (
      "", "nbPredicates");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for constraint_t_pskel.
//
bool constraint_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
    {
      this->name_parser_->pre ();
      this->name_parser_->_pre_impl ();
      this->name_parser_->_characters (s);
      this->name_parser_->_post_impl ();
      const ::std::string& tmp (this->name_parser_->post_string ());
      this->name (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
    return true;
  }

  if (n == "scope" && ns.empty ())
  {
    if (this->scope_parser_)
    {
      this->scope_parser_->pre ();
      this->scope_parser_->_pre_impl ();
      this->scope_parser_->_characters (s);
      this->scope_parser_->_post_impl ();
      const ::std::string& tmp (this->scope_parser_->post_string ());
      this->scope (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->scope = true;
    return true;
  }

  if (n == "reference" && ns.empty ())
  {
    if (this->reference_parser_)
    {
      this->reference_parser_->pre ();
      this->reference_parser_->_pre_impl ();
      this->reference_parser_->_characters (s);
      this->reference_parser_->_post_impl ();
      const ::std::string& tmp (this->reference_parser_->post_string ());
      this->reference (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->reference = true;
    return true;
  }

  if (n == "arity" && ns.empty ())
  {
    if (this->arity_parser_)
    {
      this->arity_parser_->pre ();
      this->arity_parser_->_pre_impl ();
      this->arity_parser_->_characters (s);
      this->arity_parser_->_post_impl ();
      const ::std::string& tmp (this->arity_parser_->post_string ());
      this->arity (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->arity = true;
    return true;
  }

  return false;
}

void constraint_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.name = false;
  as.scope = false;
  as.reference = false;
  as.arity = false;
}

void constraint_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.name)
    this->_expected_attribute (
      "", "name");
  if (!as.scope)
    this->_expected_attribute (
      "", "scope");
  if (!as.reference)
    this->_expected_attribute (
      "", "reference");
  if (!as.arity)
    this->_expected_attribute (
      "", "arity");

  this->v_state_attr_stack_.pop ();
}

// Attribute validation and dispatch functions for constraints_t_pskel.
//
bool constraints_t_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "nbConstraints" && ns.empty ())
  {
    if (this->nbConstraints_parser_)
    {
      this->nbConstraints_parser_->pre ();
      this->nbConstraints_parser_->_pre_impl ();
      this->nbConstraints_parser_->_characters (s);
      this->nbConstraints_parser_->_post_impl ();
      unsigned long long tmp (this->nbConstraints_parser_->post_positive_integer ());
      this->nbConstraints (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->nbConstraints = true;
    return true;
  }

  return false;
}

void constraints_t_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.nbConstraints = false;
}

void constraints_t_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.nbConstraints)
    this->_expected_attribute (
      "", "nbConstraints");

  this->v_state_attr_stack_.pop ();
}

// Begin epilogue.
//
//
// End epilogue.

