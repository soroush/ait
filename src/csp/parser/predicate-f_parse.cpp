// Generated by Bisonc++ V2.09.03 on Sat, 31 May 2014 13:33:55 +0430

// $insert class.ih
#include "predicate-f_parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {282, 1}, // 1: functional ->  int_expr
     {283, 4}, // 2: int_expr (NEG) ->  NEG LP int_expr RP
     {283, 4}, // 3: int_expr (ABS) ->  ABS LP int_expr RP
     {283, 6}, // 4: int_expr (ADD) ->  ADD LP int_expr COMMA int_expr RP
     {283, 6}, // 5: int_expr (SUB) ->  SUB LP int_expr COMMA int_expr RP
     {283, 6}, // 6: int_expr (MUL) ->  MUL LP int_expr COMMA int_expr RP
     {283, 6}, // 7: int_expr (MOD) ->  MOD LP int_expr COMMA int_expr RP
     {283, 6}, // 8: int_expr (POW) ->  POW LP int_expr COMMA int_expr RP
     {283, 6}, // 9: int_expr (MIN) ->  MIN LP int_expr COMMA int_expr RP
     {283, 6}, // 10: int_expr (MAX) ->  MAX LP int_expr COMMA int_expr RP
     {283, 6}, // 11: int_expr (EQ) ->  EQ LP int_expr COMMA int_expr RP
     {283, 6}, // 12: int_expr (NEQ) ->  NEQ LP int_expr COMMA int_expr RP
     {283, 6}, // 13: int_expr (GE) ->  GE LP int_expr COMMA int_expr RP
     {283, 6}, // 14: int_expr (GT) ->  GT LP int_expr COMMA int_expr RP
     {283, 6}, // 15: int_expr (LE) ->  LE LP int_expr COMMA int_expr RP
     {283, 6}, // 16: int_expr (LT) ->  LT LP int_expr COMMA int_expr RP
     {283, 4}, // 17: int_expr (NOT) ->  NOT LP int_expr RP
     {283, 6}, // 18: int_expr (AND) ->  AND LP int_expr COMMA int_expr RP
     {283, 6}, // 19: int_expr (OR) ->  OR LP int_expr COMMA int_expr RP
     {283, 6}, // 20: int_expr (XOR) ->  XOR LP int_expr COMMA int_expr RP
     {283, 8}, // 21: int_expr (IFF) ->  IFF LP int_expr COMMA int_expr COMMA int_expr RP
     {283, 1}, // 22: int_expr (ID) ->  ID
     {283, 1}, // 23: int_expr (INTEGER) ->  INTEGER
     {284, 1}, // 24: functional_$ ->  functional
};

// State info and SR__ transitions for each state.


SR__ const s_0[] =
{
    { { REQ_TOKEN}, { 25} },              
    { {       282}, {  1} }, // functional
    { {       283}, {  2} }, // int_expr  
    { {       262}, {  3} }, // NEG       
    { {       263}, {  4} }, // ABS       
    { {       264}, {  5} }, // ADD       
    { {       265}, {  6} }, // SUB       
    { {       266}, {  7} }, // MUL       
    { {       267}, {  8} }, // MOD       
    { {       268}, {  9} }, // POW       
    { {       269}, { 10} }, // MIN       
    { {       270}, { 11} }, // MAX       
    { {       271}, { 12} }, // EQ        
    { {       272}, { 13} }, // NEQ       
    { {       273}, { 14} }, // GE        
    { {       274}, { 15} }, // GT        
    { {       275}, { 16} }, // LE        
    { {       276}, { 17} }, // LT        
    { {       277}, { 18} }, // NOT       
    { {       278}, { 19} }, // AND       
    { {       279}, { 20} }, // OR        
    { {       280}, { 21} }, // XOR       
    { {       281}, { 22} }, // IFF       
    { {       258}, { 23} }, // ID        
    { {       257}, { 24} }, // INTEGER   
    { {         0}, {  0} },              
};

SR__ const s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ const s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ const s_3[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 25} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_4[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 26} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_5[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 27} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_6[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 28} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_7[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 29} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_8[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 30} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_9[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 31} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_10[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 32} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_11[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 33} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_12[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 34} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_13[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 35} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_14[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 36} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_15[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 37} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_16[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 38} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_17[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 39} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_18[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 40} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_19[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 41} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_20[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 42} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_21[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 43} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_22[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       259}, { 44} }, // LP
    { {         0}, {  0} },      
};

SR__ const s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ const s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ const s_25[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 45} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_26[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 46} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_27[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 47} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_28[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 48} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_29[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 49} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_30[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 50} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_31[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 51} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_32[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 52} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_33[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 53} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_34[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 54} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_35[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 55} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_36[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 56} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_37[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 57} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_38[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 58} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_39[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 59} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_40[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 60} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_41[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 61} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_42[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 62} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_43[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 63} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_44[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 64} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_45[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       260}, { 65} }, // RP
    { {         0}, {  0} },      
};

SR__ const s_46[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       260}, { 66} }, // RP
    { {         0}, {  0} },      
};

SR__ const s_47[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 67} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_48[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 68} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_49[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 69} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_50[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 70} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_51[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 71} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_52[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 72} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_53[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 73} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_54[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 74} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_55[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 75} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_56[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 76} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_57[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 77} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_58[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 78} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_59[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 79} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_60[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       260}, { 80} }, // RP
    { {         0}, {  0} },      
};

SR__ const s_61[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 81} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_62[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 82} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_63[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 83} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_64[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       261}, { 84} }, // COMMA
    { {         0}, {  0} },         
};

SR__ const s_65[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ const s_66[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ const s_67[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 85} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_68[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 86} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_69[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 87} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_70[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 88} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_71[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 89} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_72[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 90} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_73[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 91} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_74[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 92} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_75[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 93} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_76[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 94} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_77[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 95} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_78[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 96} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_79[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 97} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_80[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ const s_81[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 98} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_82[] =
{
    { { REQ_TOKEN}, { 24} },            
    { {       283}, { 99} }, // int_expr
    { {       262}, {  3} }, // NEG     
    { {       263}, {  4} }, // ABS     
    { {       264}, {  5} }, // ADD     
    { {       265}, {  6} }, // SUB     
    { {       266}, {  7} }, // MUL     
    { {       267}, {  8} }, // MOD     
    { {       268}, {  9} }, // POW     
    { {       269}, { 10} }, // MIN     
    { {       270}, { 11} }, // MAX     
    { {       271}, { 12} }, // EQ      
    { {       272}, { 13} }, // NEQ     
    { {       273}, { 14} }, // GE      
    { {       274}, { 15} }, // GT      
    { {       275}, { 16} }, // LE      
    { {       276}, { 17} }, // LT      
    { {       277}, { 18} }, // NOT     
    { {       278}, { 19} }, // AND     
    { {       279}, { 20} }, // OR      
    { {       280}, { 21} }, // XOR     
    { {       281}, { 22} }, // IFF     
    { {       258}, { 23} }, // ID      
    { {       257}, { 24} }, // INTEGER 
    { {         0}, {  0} },            
};

SR__ const s_83[] =
{
    { { REQ_TOKEN}, {  24} },            
    { {       283}, { 100} }, // int_expr
    { {       262}, {   3} }, // NEG     
    { {       263}, {   4} }, // ABS     
    { {       264}, {   5} }, // ADD     
    { {       265}, {   6} }, // SUB     
    { {       266}, {   7} }, // MUL     
    { {       267}, {   8} }, // MOD     
    { {       268}, {   9} }, // POW     
    { {       269}, {  10} }, // MIN     
    { {       270}, {  11} }, // MAX     
    { {       271}, {  12} }, // EQ      
    { {       272}, {  13} }, // NEQ     
    { {       273}, {  14} }, // GE      
    { {       274}, {  15} }, // GT      
    { {       275}, {  16} }, // LE      
    { {       276}, {  17} }, // LT      
    { {       277}, {  18} }, // NOT     
    { {       278}, {  19} }, // AND     
    { {       279}, {  20} }, // OR      
    { {       280}, {  21} }, // XOR     
    { {       281}, {  22} }, // IFF     
    { {       258}, {  23} }, // ID      
    { {       257}, {  24} }, // INTEGER 
    { {         0}, {   0} },            
};

SR__ const s_84[] =
{
    { { REQ_TOKEN}, {  24} },            
    { {       283}, { 101} }, // int_expr
    { {       262}, {   3} }, // NEG     
    { {       263}, {   4} }, // ABS     
    { {       264}, {   5} }, // ADD     
    { {       265}, {   6} }, // SUB     
    { {       266}, {   7} }, // MUL     
    { {       267}, {   8} }, // MOD     
    { {       268}, {   9} }, // POW     
    { {       269}, {  10} }, // MIN     
    { {       270}, {  11} }, // MAX     
    { {       271}, {  12} }, // EQ      
    { {       272}, {  13} }, // NEQ     
    { {       273}, {  14} }, // GE      
    { {       274}, {  15} }, // GT      
    { {       275}, {  16} }, // LE      
    { {       276}, {  17} }, // LT      
    { {       277}, {  18} }, // NOT     
    { {       278}, {  19} }, // AND     
    { {       279}, {  20} }, // OR      
    { {       280}, {  21} }, // XOR     
    { {       281}, {  22} }, // IFF     
    { {       258}, {  23} }, // ID      
    { {       257}, {  24} }, // INTEGER 
    { {         0}, {   0} },            
};

SR__ const s_85[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 102} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_86[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 103} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_87[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 104} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_88[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 105} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_89[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 106} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_90[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 107} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_91[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 108} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_92[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 109} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_93[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 110} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_94[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 111} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_95[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 112} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_96[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 113} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_97[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 114} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_98[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 115} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_99[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 116} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_100[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 117} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_101[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       261}, { 118} }, // COMMA
    { {         0}, {   0} },         
};

SR__ const s_102[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ const s_103[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ const s_104[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ const s_105[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ const s_106[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ const s_107[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ const s_108[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ const s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ const s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ const s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ const s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ const s_113[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ const s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ const s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ const s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ const s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ const s_118[] =
{
    { { REQ_TOKEN}, {  24} },            
    { {       283}, { 119} }, // int_expr
    { {       262}, {   3} }, // NEG     
    { {       263}, {   4} }, // ABS     
    { {       264}, {   5} }, // ADD     
    { {       265}, {   6} }, // SUB     
    { {       266}, {   7} }, // MUL     
    { {       267}, {   8} }, // MOD     
    { {       268}, {   9} }, // POW     
    { {       269}, {  10} }, // MIN     
    { {       270}, {  11} }, // MAX     
    { {       271}, {  12} }, // EQ      
    { {       272}, {  13} }, // NEQ     
    { {       273}, {  14} }, // GE      
    { {       274}, {  15} }, // GT      
    { {       275}, {  16} }, // LE      
    { {       276}, {  17} }, // LT      
    { {       277}, {  18} }, // NOT     
    { {       278}, {  19} }, // AND     
    { {       279}, {  20} }, // OR      
    { {       280}, {  21} }, // XOR     
    { {       281}, {  22} }, // IFF     
    { {       258}, {  23} }, // ID      
    { {       257}, {  24} }, // INTEGER 
    { {         0}, {   0} },            
};

SR__ const s_119[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       260}, { 120} }, // RP
    { {         0}, {   0} },      
};

SR__ const s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};


// State array:
SR__ const *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

FunctionalParserBase::FunctionalParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void FunctionalParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void FunctionalParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void FunctionalParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void FunctionalParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void FunctionalParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t FunctionalParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void FunctionalParser::executeAction(int production)
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 2:
        { 
         Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate));
         ref->addPostfixExpression(Expression::Token::NEG); 
         }
        break;

        case 3:
        { 
         Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate));
         ref->addPostfixExpression(Expression::Token::ABS);}
        break;

        case 4:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::ADD); }
        break;

        case 5:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::SUB); }
        break;

        case 6:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::MUL); }
        break;

        case 7:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::MOD); }
        break;

        case 8:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::POW); }
        break;

        case 9:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::MIN); }
        break;

        case 10:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::MAX); }
        break;

        case 11:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::EQ); }
        break;

        case 12:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::NEQ); }
        break;

        case 13:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::GE); }
        break;

        case 14:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::GT); }
        break;

        case 15:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::LE); }
        break;

        case 16:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::LT); }
        break;

        case 17:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::NOT); }
        break;

        case 18:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::AND); }
        break;

        case 19:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::OR); }
        break;

        case 20:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::XOR); }
        break;

        case 21:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::IFF); }
        break;

        case 22:
        {
         Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); 
         ref->addPostfixExpression(Expression::Token::REF, d_scanner.matched()); 
         }
        break;

        case 23:
        { Predicate* ref = static_cast<Predicate*>(this->instance.relation(this->predicate)); ref->addPostfixExpression(Expression::Token::CONST, d_scanner.matched()); }
        break;

    }
}

inline void FunctionalParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void FunctionalParser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int FunctionalParser::lookup(bool recovery)
{
    // $insert threading
    SR__ const *sr = s_state[d_state__];  // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR_ array

    SR__ const *lastElementPtr = sr + lastIdx;
    SR__ const *elementPtr = sr + 1;      // start the search at s_xx[1]

    while (elementPtr != lastElementPtr && elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void FunctionalParser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int FunctionalParser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}

