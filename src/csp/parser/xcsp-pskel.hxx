// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XCSP_PSKEL_HXX
#define XCSP_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
class problemType_pskel;
class problemFormat_pskel;
class semanticsType_pskel;
class presentation_t_pskel;
class domain_t_pskel;
class domains_t_pskel;
class variable_t_pskel;
class variables_t_pskel;
class relation_t_pskel;
class relations_t_pskel;
class expression_t_pskel;
class predicate_t_pskel;
class predicates_t_pskel;
class constraint_t_pskel;
class constraints_t_pskel;
class instance_t_pskel;

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

#include <utility>
#include <memory>
#include "../variable.hpp"
#include "../relation-base.hpp"
#include "../predicate.hpp"
#include "../domain.hpp"
#include "../csp-problem.hpp"
#include "../constraint.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

class problemType_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual AIT::CSP::CSP_Problem::Presentation::Type
  post_problemType () = 0;
};

class problemFormat_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual AIT::CSP::CSP_Problem::Presentation::Format
  post_problemFormat () = 0;
};

class semanticsType_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual AIT::CSP::RelationBase::Semantics
  post_semanticsType () = 0;
};

class presentation_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  maxConstraintArity (unsigned long long);

  virtual void
  minViolatedConstraints (const ::std::string&);

  virtual void
  nbSolutions (const ::std::string&);

  virtual void
  solution (const ::std::string&);

  virtual void
  type (const AIT::CSP::CSP_Problem::Presentation::Type&);

  virtual void
  format (const AIT::CSP::CSP_Problem::Presentation::Format&);

  virtual std::unique_ptr<AIT::CSP::CSP_Problem::Presentation>
  post_presentation_t () = 0;

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  maxConstraintArity_parser (::xml_schema::positive_integer_pskel&);

  void
  minViolatedConstraints_parser (::xml_schema::string_pskel&);

  void
  nbSolutions_parser (::xml_schema::string_pskel&);

  void
  solution_parser (::xml_schema::string_pskel&);

  void
  type_parser (::problemType_pskel&);

  void
  format_parser (::problemFormat_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::positive_integer_pskel& /* maxConstraintArity */,
           ::xml_schema::string_pskel& /* minViolatedConstraints */,
           ::xml_schema::string_pskel& /* nbSolutions */,
           ::xml_schema::string_pskel& /* solution */,
           ::problemType_pskel& /* type */,
           ::problemFormat_pskel& /* format */);

  // Constructor.
  //
  presentation_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::positive_integer_pskel* maxConstraintArity_parser_;
  ::xml_schema::string_pskel* minViolatedConstraints_parser_;
  ::xml_schema::string_pskel* nbSolutions_parser_;
  ::xml_schema::string_pskel* solution_parser_;
  ::problemType_pskel* type_parser_;
  ::problemFormat_pskel* format_parser_;

  protected:
  struct v_state_attr_
  {
    bool format;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class domain_t_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  nbValues (unsigned long long);

  virtual std::unique_ptr<AIT::CSP::Domain>
  post_domain_t () = 0;

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  nbValues_parser (::xml_schema::positive_integer_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::positive_integer_pskel& /* nbValues */);

  // Constructor.
  //
  domain_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::positive_integer_pskel* nbValues_parser_;

  protected:
  struct v_state_attr_
  {
    bool name;
    bool nbValues;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class domains_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  domain (std::unique_ptr<AIT::CSP::Domain>);

  virtual void
  nbDomains (unsigned long long);

  virtual std::vector<std::unique_ptr<AIT::CSP::Domain>>&&
  post_domains_t () = 0;

  // Parser construction API.
  //
  void
  domain_parser (::domain_t_pskel&);

  void
  nbDomains_parser (::xml_schema::positive_integer_pskel&);

  void
  parsers (::domain_t_pskel& /* domain */,
           ::xml_schema::positive_integer_pskel& /* nbDomains */);

  // Constructor.
  //
  domains_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::domain_t_pskel* domain_parser_;
  ::xml_schema::positive_integer_pskel* nbDomains_parser_;

  protected:
  struct v_state_descr_
  {
    void (::domains_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

  protected:
  struct v_state_attr_
  {
    bool nbDomains;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class variable_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  domain (const ::std::string&);

  virtual std::unique_ptr<AIT::CSP::Variable>
  post_variable_t () = 0;

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  domain_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* domain */);

  // Constructor.
  //
  variable_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* domain_parser_;

  protected:
  struct v_state_attr_
  {
    bool name;
    bool domain;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class variables_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  variable (std::unique_ptr<AIT::CSP::Variable>);

  virtual void
  nbVariables (unsigned long long);

  virtual std::vector<std::unique_ptr<AIT::CSP::Variable>>&&
  post_variables_t () = 0;

  // Parser construction API.
  //
  void
  variable_parser (::variable_t_pskel&);

  void
  nbVariables_parser (::xml_schema::positive_integer_pskel&);

  void
  parsers (::variable_t_pskel& /* variable */,
           ::xml_schema::positive_integer_pskel& /* nbVariables */);

  // Constructor.
  //
  variables_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::variable_t_pskel* variable_parser_;
  ::xml_schema::positive_integer_pskel* nbVariables_parser_;

  protected:
  struct v_state_descr_
  {
    void (::variables_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

  protected:
  struct v_state_attr_
  {
    bool nbVariables;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class relation_t_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  arity (unsigned long long);

  virtual void
  nbTuples (unsigned long long);

  virtual void
  semantics (const AIT::CSP::RelationBase::Semantics&);

  virtual void
  post_relation_t ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  arity_parser (::xml_schema::positive_integer_pskel&);

  void
  nbTuples_parser (::xml_schema::positive_integer_pskel&);

  void
  semantics_parser (::semanticsType_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::positive_integer_pskel& /* arity */,
           ::xml_schema::positive_integer_pskel& /* nbTuples */,
           ::semanticsType_pskel& /* semantics */);

  // Constructor.
  //
  relation_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::positive_integer_pskel* arity_parser_;
  ::xml_schema::positive_integer_pskel* nbTuples_parser_;
  ::semanticsType_pskel* semantics_parser_;

  protected:
  struct v_state_attr_
  {
    bool name;
    bool nbTuples;
    bool semantics;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class relations_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  relation ();

  virtual void
  nbDomains (unsigned long long);

  virtual void
  nbRelations (unsigned long long);

  virtual void
  post_relations_t ();

  // Parser construction API.
  //
  void
  relation_parser (::relation_t_pskel&);

  void
  nbDomains_parser (::xml_schema::positive_integer_pskel&);

  void
  nbRelations_parser (::xml_schema::positive_integer_pskel&);

  void
  parsers (::relation_t_pskel& /* relation */,
           ::xml_schema::positive_integer_pskel& /* nbDomains */,
           ::xml_schema::positive_integer_pskel& /* nbRelations */);

  // Constructor.
  //
  relations_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::relation_t_pskel* relation_parser_;
  ::xml_schema::positive_integer_pskel* nbDomains_parser_;
  ::xml_schema::positive_integer_pskel* nbRelations_parser_;

  protected:
  struct v_state_descr_
  {
    void (::relations_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

class expression_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  functional (const ::std::string&);

  virtual void
  math (const ::std::string&);

  virtual void
  postfix (const ::std::string&);

  virtual void
  infix (const ::std::string&);

  virtual std::pair<AIT::CSP::Predicate::Type,std::string>
  post_expression_t () = 0;

  // Parser construction API.
  //
  void
  functional_parser (::xml_schema::string_pskel&);

  void
  math_parser (::xml_schema::string_pskel&);

  void
  postfix_parser (::xml_schema::string_pskel&);

  void
  infix_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* functional */,
           ::xml_schema::string_pskel& /* math */,
           ::xml_schema::string_pskel& /* postfix */,
           ::xml_schema::string_pskel& /* infix */);

  // Constructor.
  //
  expression_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* functional_parser_;
  ::xml_schema::string_pskel* math_parser_;
  ::xml_schema::string_pskel* postfix_parser_;
  ::xml_schema::string_pskel* infix_parser_;

  protected:
  struct v_state_descr_
  {
    void (::expression_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xml_schema::ro_string& ns,
         const ::xml_schema::ro_string& n,
         const ::xml_schema::ro_string* t,
         bool start);

  unsigned char v_all_first_[4UL];
  ::xsd::cxx::parser::validating::all_stack v_all_count_;
};

class predicate_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  parameters (const ::std::string&);

  virtual void
  expression (const std::pair<AIT::CSP::Predicate::Type,std::string>&);

  virtual void
  name (const ::std::string&);

  virtual std::unique_ptr<AIT::CSP::Predicate>
  post_predicate_t () = 0;

  // Parser construction API.
  //
  void
  parameters_parser (::xml_schema::string_pskel&);

  void
  expression_parser (::expression_t_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* parameters */,
           ::expression_t_pskel& /* expression */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  predicate_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::xml_schema::string_pskel* parameters_parser_;
  ::expression_t_pskel* expression_parser_;
  ::xml_schema::string_pskel* name_parser_;

  protected:
  struct v_state_descr_
  {
    void (::predicate_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

  protected:
  struct v_state_attr_
  {
    bool name;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class predicates_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  predicate (std::unique_ptr<AIT::CSP::Predicate>);

  virtual void
  nbPredicates (unsigned long long);

  virtual std::vector<std::unique_ptr<AIT::CSP::Predicate>>&&
  post_predicates_t () = 0;

  // Parser construction API.
  //
  void
  predicate_parser (::predicate_t_pskel&);

  void
  nbPredicates_parser (::xml_schema::positive_integer_pskel&);

  void
  parsers (::predicate_t_pskel& /* predicate */,
           ::xml_schema::positive_integer_pskel& /* nbPredicates */);

  // Constructor.
  //
  predicates_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::predicate_t_pskel* predicate_parser_;
  ::xml_schema::positive_integer_pskel* nbPredicates_parser_;

  protected:
  struct v_state_descr_
  {
    void (::predicates_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

  protected:
  struct v_state_attr_
  {
    bool nbPredicates;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class constraint_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  parameters (const ::std::string&);

  virtual void
  name (const ::std::string&);

  virtual void
  scope (const ::std::string&);

  virtual void
  reference (const ::std::string&);

  virtual void
  arity (unsigned long long);

  virtual std::unique_ptr<AIT::CSP::Constraint>
  post_constraint_t () = 0;

  // Parser construction API.
  //
  void
  parameters_parser (::xml_schema::string_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  scope_parser (::xml_schema::string_pskel&);

  void
  reference_parser (::xml_schema::string_pskel&);

  void
  arity_parser (::xml_schema::positive_integer_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* parameters */,
           ::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* scope */,
           ::xml_schema::string_pskel& /* reference */,
           ::xml_schema::positive_integer_pskel& /* arity */);

  // Constructor.
  //
  constraint_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::xml_schema::string_pskel* parameters_parser_;
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* scope_parser_;
  ::xml_schema::string_pskel* reference_parser_;
  ::xml_schema::positive_integer_pskel* arity_parser_;

  protected:
  struct v_state_descr_
  {
    void (::constraint_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

  protected:
  struct v_state_attr_
  {
    bool name;
    bool scope;
    bool reference;
    bool arity;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class constraints_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  constraint (std::unique_ptr<AIT::CSP::Constraint>);

  virtual void
  nbConstraints (unsigned long long);

  virtual std::vector<std::unique_ptr<AIT::CSP::Constraint>>&&
  post_constraints_t () = 0;

  // Parser construction API.
  //
  void
  constraint_parser (::constraint_t_pskel&);

  void
  nbConstraints_parser (::xml_schema::positive_integer_pskel&);

  void
  parsers (::constraint_t_pskel& /* constraint */,
           ::xml_schema::positive_integer_pskel& /* nbConstraints */);

  // Constructor.
  //
  constraints_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&,
                             const ::xml_schema::ro_string&);


  protected:
  ::constraint_t_pskel* constraint_parser_;
  ::xml_schema::positive_integer_pskel* nbConstraints_parser_;

  protected:
  struct v_state_descr_
  {
    void (::constraints_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

  protected:
  struct v_state_attr_
  {
    bool nbConstraints;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class instance_t_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  presentation (std::unique_ptr<AIT::CSP::CSP_Problem::Presentation>);

  virtual void
  domains (std::vector<std::unique_ptr<AIT::CSP::Domain>>&&);

  virtual void
  variables (std::vector<std::unique_ptr<AIT::CSP::Variable>>&&);

  virtual void
  relations ();

  virtual void
  predicates (std::vector<std::unique_ptr<AIT::CSP::Predicate>>&&);

  virtual void
  constraints (std::vector<std::unique_ptr<AIT::CSP::Constraint>>&&);

  virtual std::unique_ptr<AIT::CSP::CSP_Problem>
  post_instance_t () = 0;

  // Parser construction API.
  //
  void
  presentation_parser (::presentation_t_pskel&);

  void
  domains_parser (::domains_t_pskel&);

  void
  variables_parser (::variables_t_pskel&);

  void
  relations_parser (::relations_t_pskel&);

  void
  predicates_parser (::predicates_t_pskel&);

  void
  constraints_parser (::constraints_t_pskel&);

  void
  parsers (::presentation_t_pskel& /* presentation */,
           ::domains_t_pskel& /* domains */,
           ::variables_t_pskel& /* variables */,
           ::relations_t_pskel& /* relations */,
           ::predicates_t_pskel& /* predicates */,
           ::constraints_t_pskel& /* constraints */);

  // Constructor.
  //
  instance_t_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::presentation_t_pskel* presentation_parser_;
  ::domains_t_pskel* domains_parser_;
  ::variables_t_pskel* variables_parser_;
  ::relations_t_pskel* relations_parser_;
  ::predicates_t_pskel* predicates_parser_;
  ::constraints_t_pskel* constraints_parser_;

  protected:
  struct v_state_descr_
  {
    void (::instance_t_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string&,
      const ::xml_schema::ro_string*,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsd::cxx::parser::pod_stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
};

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XCSP_PSKEL_HXX
