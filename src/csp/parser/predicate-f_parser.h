// Generated by Bisonc++ V2.09.03 on Mon, 15 Jul 2013 16:59:25 +0430

#ifndef FunctionalParser_h_included
#define FunctionalParser_h_included

#include "predicate-f_parserbase.h"
#include "predicate-f_scanner.h"
#include "expression.h"
#include "../predicate.h"
#include <sstream>
#include <vector>
#include <map>

#undef FunctionalParser
class FunctionalParser: public FunctionalParserBase {

public:
    FunctionalParser(const std::string& input,
            AIT::CSP::Predicate* predicate);
    ~FunctionalParser() {
    }
    ;
    int parse();

private:
    std::istringstream str;
    PredicateFunctionalLexer d_scanner;
    AIT::CSP::Predicate* predicate;

    void error(char const *msg);
    int lex();
    void print();
    void executeAction(int ruleNr);
    void errorRecovery();
    int lookup(bool recovery);
    void nextToken();
};

inline void FunctionalParser::error(char const *msg) {
    std::cerr << msg << '\n';
}

inline int FunctionalParser::lex() {
    return d_scanner.lex();
}

inline FunctionalParser::FunctionalParser(const std::string& input,
        AIT::CSP::Predicate* predicate_) :
        str(input), d_scanner(str, std::cout), predicate(predicate_) {
}

inline void FunctionalParser::print() {
}

#endif
