// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aabt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AIT {
namespace protocols {
namespace csp {
namespace aabt {

namespace {

const ::google::protobuf::Descriptor* P_Assignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_Assignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_CompoundAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_CompoundAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_NoGood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_NoGood_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_Explanation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_Explanation_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_CVOrderData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_CVOrderData_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* P_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_aabt_2eproto() {
  protobuf_AddDesc_aabt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aabt.proto");
  GOOGLE_CHECK(file != NULL);
  P_Assignment_descriptor_ = file->message_type(0);
  static const int P_Assignment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Assignment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Assignment, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Assignment, time_stamp_),
  };
  P_Assignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_Assignment_descriptor_,
      P_Assignment::default_instance_,
      P_Assignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Assignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Assignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_Assignment));
  P_CompoundAssignment_descriptor_ = file->message_type(1);
  static const int P_CompoundAssignment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CompoundAssignment, assignments_),
  };
  P_CompoundAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_CompoundAssignment_descriptor_,
      P_CompoundAssignment::default_instance_,
      P_CompoundAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CompoundAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CompoundAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_CompoundAssignment));
  P_NoGood_descriptor_ = file->message_type(2);
  static const int P_NoGood_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_NoGood, lhs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_NoGood, rhs_),
  };
  P_NoGood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_NoGood_descriptor_,
      P_NoGood::default_instance_,
      P_NoGood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_NoGood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_NoGood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_NoGood));
  P_Explanation_descriptor_ = file->message_type(3);
  static const int P_Explanation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Explanation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Explanation, lhs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Explanation, rhs_),
  };
  P_Explanation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_Explanation_descriptor_,
      P_Explanation::default_instance_,
      P_Explanation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Explanation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Explanation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_Explanation));
  P_CVOrderData_descriptor_ = file->message_type(4);
  static const int P_CVOrderData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CVOrderData, assignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CVOrderData, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CVOrderData, tv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CVOrderData, e_),
  };
  P_CVOrderData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_CVOrderData_descriptor_,
      P_CVOrderData::default_instance_,
      P_CVOrderData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CVOrderData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CVOrderData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_CVOrderData));
  P_Message_descriptor_ = file->message_type(5);
  static const int P_Message_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, vi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, ei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, oi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, tvi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, nogood_),
  };
  P_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_Message_descriptor_,
      P_Message::default_instance_,
      P_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_Message));
  P_MessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aabt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_Assignment_descriptor_, &P_Assignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_CompoundAssignment_descriptor_, &P_CompoundAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_NoGood_descriptor_, &P_NoGood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_Explanation_descriptor_, &P_Explanation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_CVOrderData_descriptor_, &P_CVOrderData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_Message_descriptor_, &P_Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aabt_2eproto() {
  delete P_Assignment::default_instance_;
  delete P_Assignment_reflection_;
  delete P_CompoundAssignment::default_instance_;
  delete P_CompoundAssignment_reflection_;
  delete P_NoGood::default_instance_;
  delete P_NoGood_reflection_;
  delete P_Explanation::default_instance_;
  delete P_Explanation_reflection_;
  delete P_CVOrderData::default_instance_;
  delete P_CVOrderData_reflection_;
  delete P_Message::default_instance_;
  delete P_Message_reflection_;
}

void protobuf_AddDesc_aabt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\naabt.proto\022\026AIT.protocols.csp.aabt\"=\n\014"
    "P_Assignment\022\n\n\002id\030\001 \002(\005\022\r\n\005value\030\002 \001(\005\022"
    "\022\n\ntime_stamp\030\003 \002(\005\"Q\n\024P_CompoundAssignm"
    "ent\0229\n\013assignments\030\001 \003(\0132$.AIT.protocols"
    ".csp.aabt.P_Assignment\"x\n\010P_NoGood\0229\n\003lh"
    "s\030\001 \002(\0132,.AIT.protocols.csp.aabt.P_Compo"
    "undAssignment\0221\n\003rhs\030\002 \002(\0132$.AIT.protoco"
    "ls.csp.aabt.P_Assignment\"c\n\rP_Explanatio"
    "n\022\n\n\002id\030\001 \002(\005\0229\n\003lhs\030\002 \002(\0132,.AIT.protoco"
    "ls.csp.aabt.P_CompoundAssignment\022\013\n\003rhs\030"
    "\003 \002(\005\"\226\001\n\rP_CVOrderData\0228\n\nassignment\030\001 "
    "\002(\0132$.AIT.protocols.csp.aabt.P_Assignmen"
    "t\022\r\n\005order\030\002 \003(\005\022\n\n\002tv\030\003 \003(\005\0220\n\001e\030\004 \003(\0132"
    "%.AIT.protocols.csp.aabt.P_Explanation\"\200"
    "\002\n\tP_Message\0223\n\004type\030\001 \002(\0162%.AIT.protoco"
    "ls.csp.aabt.P_MessageType\022\016\n\006sender\030\002 \002("
    "\005\0220\n\002vi\030\003 \001(\0132$.AIT.protocols.csp.aabt.P"
    "_Assignment\0221\n\002ei\030\004 \001(\0132%.AIT.protocols."
    "csp.aabt.P_Explanation\022\n\n\002oi\030\005 \003(\005\022\013\n\003tv"
    "i\030\006 \003(\005\0220\n\006nogood\030\007 \001(\0132 .AIT.protocols."
    "csp.aabt.P_NoGood*@\n\rP_MessageType\022\010\n\004T_"
    "OK\020\001\022\014\n\010T_NOGOOD\020\002\022\013\n\007T_ORDER\020\003\022\n\n\006T_STO"
    "P\020\004", 883);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aabt.proto", &protobuf_RegisterTypes);
  P_Assignment::default_instance_ = new P_Assignment();
  P_CompoundAssignment::default_instance_ = new P_CompoundAssignment();
  P_NoGood::default_instance_ = new P_NoGood();
  P_Explanation::default_instance_ = new P_Explanation();
  P_CVOrderData::default_instance_ = new P_CVOrderData();
  P_Message::default_instance_ = new P_Message();
  P_Assignment::default_instance_->InitAsDefaultInstance();
  P_CompoundAssignment::default_instance_->InitAsDefaultInstance();
  P_NoGood::default_instance_->InitAsDefaultInstance();
  P_Explanation::default_instance_->InitAsDefaultInstance();
  P_CVOrderData::default_instance_->InitAsDefaultInstance();
  P_Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aabt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aabt_2eproto {
  StaticDescriptorInitializer_aabt_2eproto() {
    protobuf_AddDesc_aabt_2eproto();
  }
} static_descriptor_initializer_aabt_2eproto_;

const ::google::protobuf::EnumDescriptor* P_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_MessageType_descriptor_;
}
bool P_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int P_Assignment::kIdFieldNumber;
const int P_Assignment::kValueFieldNumber;
const int P_Assignment::kTimeStampFieldNumber;
#endif  // !_MSC_VER

P_Assignment::P_Assignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_Assignment::InitAsDefaultInstance() {
}

P_Assignment::P_Assignment(const P_Assignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_Assignment::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  time_stamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_Assignment::~P_Assignment() {
  SharedDtor();
}

void P_Assignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void P_Assignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_Assignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_Assignment_descriptor_;
}

const P_Assignment& P_Assignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aabt_2eproto();  return *default_instance_;
}

P_Assignment* P_Assignment::default_instance_ = NULL;

P_Assignment* P_Assignment::New() const {
  return new P_Assignment;
}

void P_Assignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
    time_stamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_Assignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }
      
      // required int32 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_Assignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  // required int32 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_stamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_Assignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  // required int32 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_stamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_Assignment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // required int32 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_stamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_Assignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_Assignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_Assignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_Assignment::MergeFrom(const P_Assignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_Assignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_Assignment::CopyFrom(const P_Assignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_Assignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void P_Assignment::Swap(P_Assignment* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_Assignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_Assignment_descriptor_;
  metadata.reflection = P_Assignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int P_CompoundAssignment::kAssignmentsFieldNumber;
#endif  // !_MSC_VER

P_CompoundAssignment::P_CompoundAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_CompoundAssignment::InitAsDefaultInstance() {
}

P_CompoundAssignment::P_CompoundAssignment(const P_CompoundAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_CompoundAssignment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_CompoundAssignment::~P_CompoundAssignment() {
  SharedDtor();
}

void P_CompoundAssignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void P_CompoundAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_CompoundAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_CompoundAssignment_descriptor_;
}

const P_CompoundAssignment& P_CompoundAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aabt_2eproto();  return *default_instance_;
}

P_CompoundAssignment* P_CompoundAssignment::default_instance_ = NULL;

P_CompoundAssignment* P_CompoundAssignment::New() const {
  return new P_CompoundAssignment;
}

void P_CompoundAssignment::Clear() {
  assignments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_CompoundAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AIT.protocols.csp.aabt.P_Assignment assignments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assignments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_assignments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_CompoundAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AIT.protocols.csp.aabt.P_Assignment assignments = 1;
  for (int i = 0; i < this->assignments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assignments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_CompoundAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AIT.protocols.csp.aabt.P_Assignment assignments = 1;
  for (int i = 0; i < this->assignments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assignments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_CompoundAssignment::ByteSize() const {
  int total_size = 0;
  
  // repeated .AIT.protocols.csp.aabt.P_Assignment assignments = 1;
  total_size += 1 * this->assignments_size();
  for (int i = 0; i < this->assignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assignments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_CompoundAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_CompoundAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_CompoundAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_CompoundAssignment::MergeFrom(const P_CompoundAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  assignments_.MergeFrom(from.assignments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_CompoundAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_CompoundAssignment::CopyFrom(const P_CompoundAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_CompoundAssignment::IsInitialized() const {
  
  for (int i = 0; i < assignments_size(); i++) {
    if (!this->assignments(i).IsInitialized()) return false;
  }
  return true;
}

void P_CompoundAssignment::Swap(P_CompoundAssignment* other) {
  if (other != this) {
    assignments_.Swap(&other->assignments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_CompoundAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_CompoundAssignment_descriptor_;
  metadata.reflection = P_CompoundAssignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int P_NoGood::kLhsFieldNumber;
const int P_NoGood::kRhsFieldNumber;
#endif  // !_MSC_VER

P_NoGood::P_NoGood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_NoGood::InitAsDefaultInstance() {
  lhs_ = const_cast< ::AIT::protocols::csp::aabt::P_CompoundAssignment*>(&::AIT::protocols::csp::aabt::P_CompoundAssignment::default_instance());
  rhs_ = const_cast< ::AIT::protocols::csp::aabt::P_Assignment*>(&::AIT::protocols::csp::aabt::P_Assignment::default_instance());
}

P_NoGood::P_NoGood(const P_NoGood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_NoGood::SharedCtor() {
  _cached_size_ = 0;
  lhs_ = NULL;
  rhs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_NoGood::~P_NoGood() {
  SharedDtor();
}

void P_NoGood::SharedDtor() {
  if (this != default_instance_) {
    delete lhs_;
    delete rhs_;
  }
}

void P_NoGood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_NoGood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_NoGood_descriptor_;
}

const P_NoGood& P_NoGood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aabt_2eproto();  return *default_instance_;
}

P_NoGood* P_NoGood::default_instance_ = NULL;

P_NoGood* P_NoGood::New() const {
  return new P_NoGood;
}

void P_NoGood::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lhs()) {
      if (lhs_ != NULL) lhs_->::AIT::protocols::csp::aabt::P_CompoundAssignment::Clear();
    }
    if (has_rhs()) {
      if (rhs_ != NULL) rhs_->::AIT::protocols::csp::aabt::P_Assignment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_NoGood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AIT.protocols.csp.aabt.P_CompoundAssignment lhs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lhs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rhs;
        break;
      }
      
      // required .AIT.protocols.csp.aabt.P_Assignment rhs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rhs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_NoGood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AIT.protocols.csp.aabt.P_CompoundAssignment lhs = 1;
  if (has_lhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lhs(), output);
  }
  
  // required .AIT.protocols.csp.aabt.P_Assignment rhs = 2;
  if (has_rhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rhs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_NoGood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AIT.protocols.csp.aabt.P_CompoundAssignment lhs = 1;
  if (has_lhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lhs(), target);
  }
  
  // required .AIT.protocols.csp.aabt.P_Assignment rhs = 2;
  if (has_rhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rhs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_NoGood::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AIT.protocols.csp.aabt.P_CompoundAssignment lhs = 1;
    if (has_lhs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lhs());
    }
    
    // required .AIT.protocols.csp.aabt.P_Assignment rhs = 2;
    if (has_rhs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rhs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_NoGood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_NoGood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_NoGood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_NoGood::MergeFrom(const P_NoGood& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lhs()) {
      mutable_lhs()->::AIT::protocols::csp::aabt::P_CompoundAssignment::MergeFrom(from.lhs());
    }
    if (from.has_rhs()) {
      mutable_rhs()->::AIT::protocols::csp::aabt::P_Assignment::MergeFrom(from.rhs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_NoGood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_NoGood::CopyFrom(const P_NoGood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_NoGood::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_lhs()) {
    if (!this->lhs().IsInitialized()) return false;
  }
  if (has_rhs()) {
    if (!this->rhs().IsInitialized()) return false;
  }
  return true;
}

void P_NoGood::Swap(P_NoGood* other) {
  if (other != this) {
    std::swap(lhs_, other->lhs_);
    std::swap(rhs_, other->rhs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_NoGood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_NoGood_descriptor_;
  metadata.reflection = P_NoGood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int P_Explanation::kIdFieldNumber;
const int P_Explanation::kLhsFieldNumber;
const int P_Explanation::kRhsFieldNumber;
#endif  // !_MSC_VER

P_Explanation::P_Explanation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_Explanation::InitAsDefaultInstance() {
  lhs_ = const_cast< ::AIT::protocols::csp::aabt::P_CompoundAssignment*>(&::AIT::protocols::csp::aabt::P_CompoundAssignment::default_instance());
}

P_Explanation::P_Explanation(const P_Explanation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_Explanation::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lhs_ = NULL;
  rhs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_Explanation::~P_Explanation() {
  SharedDtor();
}

void P_Explanation::SharedDtor() {
  if (this != default_instance_) {
    delete lhs_;
  }
}

void P_Explanation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_Explanation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_Explanation_descriptor_;
}

const P_Explanation& P_Explanation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aabt_2eproto();  return *default_instance_;
}

P_Explanation* P_Explanation::default_instance_ = NULL;

P_Explanation* P_Explanation::New() const {
  return new P_Explanation;
}

void P_Explanation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_lhs()) {
      if (lhs_ != NULL) lhs_->::AIT::protocols::csp::aabt::P_CompoundAssignment::Clear();
    }
    rhs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_Explanation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lhs;
        break;
      }
      
      // required .AIT.protocols.csp.aabt.P_CompoundAssignment lhs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lhs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lhs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rhs;
        break;
      }
      
      // required int32 rhs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rhs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rhs_)));
          set_has_rhs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_Explanation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required .AIT.protocols.csp.aabt.P_CompoundAssignment lhs = 2;
  if (has_lhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lhs(), output);
  }
  
  // required int32 rhs = 3;
  if (has_rhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rhs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_Explanation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required .AIT.protocols.csp.aabt.P_CompoundAssignment lhs = 2;
  if (has_lhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lhs(), target);
  }
  
  // required int32 rhs = 3;
  if (has_rhs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rhs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_Explanation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required .AIT.protocols.csp.aabt.P_CompoundAssignment lhs = 2;
    if (has_lhs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lhs());
    }
    
    // required int32 rhs = 3;
    if (has_rhs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rhs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_Explanation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_Explanation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_Explanation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_Explanation::MergeFrom(const P_Explanation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lhs()) {
      mutable_lhs()->::AIT::protocols::csp::aabt::P_CompoundAssignment::MergeFrom(from.lhs());
    }
    if (from.has_rhs()) {
      set_rhs(from.rhs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_Explanation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_Explanation::CopyFrom(const P_Explanation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_Explanation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_lhs()) {
    if (!this->lhs().IsInitialized()) return false;
  }
  return true;
}

void P_Explanation::Swap(P_Explanation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lhs_, other->lhs_);
    std::swap(rhs_, other->rhs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_Explanation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_Explanation_descriptor_;
  metadata.reflection = P_Explanation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int P_CVOrderData::kAssignmentFieldNumber;
const int P_CVOrderData::kOrderFieldNumber;
const int P_CVOrderData::kTvFieldNumber;
const int P_CVOrderData::kEFieldNumber;
#endif  // !_MSC_VER

P_CVOrderData::P_CVOrderData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_CVOrderData::InitAsDefaultInstance() {
  assignment_ = const_cast< ::AIT::protocols::csp::aabt::P_Assignment*>(&::AIT::protocols::csp::aabt::P_Assignment::default_instance());
}

P_CVOrderData::P_CVOrderData(const P_CVOrderData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_CVOrderData::SharedCtor() {
  _cached_size_ = 0;
  assignment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_CVOrderData::~P_CVOrderData() {
  SharedDtor();
}

void P_CVOrderData::SharedDtor() {
  if (this != default_instance_) {
    delete assignment_;
  }
}

void P_CVOrderData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_CVOrderData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_CVOrderData_descriptor_;
}

const P_CVOrderData& P_CVOrderData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aabt_2eproto();  return *default_instance_;
}

P_CVOrderData* P_CVOrderData::default_instance_ = NULL;

P_CVOrderData* P_CVOrderData::New() const {
  return new P_CVOrderData;
}

void P_CVOrderData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_assignment()) {
      if (assignment_ != NULL) assignment_->::AIT::protocols::csp::aabt::P_Assignment::Clear();
    }
  }
  order_.Clear();
  tv_.Clear();
  e_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_CVOrderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AIT.protocols.csp.aabt.P_Assignment assignment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assignment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }
      
      // repeated int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_order())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_order())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        if (input->ExpectTag(24)) goto parse_tv;
        break;
      }
      
      // repeated int32 tv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_tv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tv;
        if (input->ExpectTag(34)) goto parse_e;
        break;
      }
      
      // repeated .AIT.protocols.csp.aabt.P_Explanation e = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_e;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_CVOrderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AIT.protocols.csp.aabt.P_Assignment assignment = 1;
  if (has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assignment(), output);
  }
  
  // repeated int32 order = 2;
  for (int i = 0; i < this->order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->order(i), output);
  }
  
  // repeated int32 tv = 3;
  for (int i = 0; i < this->tv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->tv(i), output);
  }
  
  // repeated .AIT.protocols.csp.aabt.P_Explanation e = 4;
  for (int i = 0; i < this->e_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->e(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_CVOrderData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AIT.protocols.csp.aabt.P_Assignment assignment = 1;
  if (has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assignment(), target);
  }
  
  // repeated int32 order = 2;
  for (int i = 0; i < this->order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->order(i), target);
  }
  
  // repeated int32 tv = 3;
  for (int i = 0; i < this->tv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->tv(i), target);
  }
  
  // repeated .AIT.protocols.csp.aabt.P_Explanation e = 4;
  for (int i = 0; i < this->e_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->e(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_CVOrderData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AIT.protocols.csp.aabt.P_Assignment assignment = 1;
    if (has_assignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assignment());
    }
    
  }
  // repeated int32 order = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->order_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->order(i));
    }
    total_size += 1 * this->order_size() + data_size;
  }
  
  // repeated int32 tv = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->tv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tv(i));
    }
    total_size += 1 * this->tv_size() + data_size;
  }
  
  // repeated .AIT.protocols.csp.aabt.P_Explanation e = 4;
  total_size += 1 * this->e_size();
  for (int i = 0; i < this->e_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_CVOrderData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_CVOrderData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_CVOrderData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_CVOrderData::MergeFrom(const P_CVOrderData& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_.MergeFrom(from.order_);
  tv_.MergeFrom(from.tv_);
  e_.MergeFrom(from.e_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assignment()) {
      mutable_assignment()->::AIT::protocols::csp::aabt::P_Assignment::MergeFrom(from.assignment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_CVOrderData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_CVOrderData::CopyFrom(const P_CVOrderData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_CVOrderData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_assignment()) {
    if (!this->assignment().IsInitialized()) return false;
  }
  for (int i = 0; i < e_size(); i++) {
    if (!this->e(i).IsInitialized()) return false;
  }
  return true;
}

void P_CVOrderData::Swap(P_CVOrderData* other) {
  if (other != this) {
    std::swap(assignment_, other->assignment_);
    order_.Swap(&other->order_);
    tv_.Swap(&other->tv_);
    e_.Swap(&other->e_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_CVOrderData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_CVOrderData_descriptor_;
  metadata.reflection = P_CVOrderData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int P_Message::kTypeFieldNumber;
const int P_Message::kSenderFieldNumber;
const int P_Message::kViFieldNumber;
const int P_Message::kEiFieldNumber;
const int P_Message::kOiFieldNumber;
const int P_Message::kTviFieldNumber;
const int P_Message::kNogoodFieldNumber;
#endif  // !_MSC_VER

P_Message::P_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_Message::InitAsDefaultInstance() {
  vi_ = const_cast< ::AIT::protocols::csp::aabt::P_Assignment*>(&::AIT::protocols::csp::aabt::P_Assignment::default_instance());
  ei_ = const_cast< ::AIT::protocols::csp::aabt::P_Explanation*>(&::AIT::protocols::csp::aabt::P_Explanation::default_instance());
  nogood_ = const_cast< ::AIT::protocols::csp::aabt::P_NoGood*>(&::AIT::protocols::csp::aabt::P_NoGood::default_instance());
}

P_Message::P_Message(const P_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  sender_ = 0;
  vi_ = NULL;
  ei_ = NULL;
  nogood_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_Message::~P_Message() {
  SharedDtor();
}

void P_Message::SharedDtor() {
  if (this != default_instance_) {
    delete vi_;
    delete ei_;
    delete nogood_;
  }
}

void P_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_Message_descriptor_;
}

const P_Message& P_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aabt_2eproto();  return *default_instance_;
}

P_Message* P_Message::default_instance_ = NULL;

P_Message* P_Message::New() const {
  return new P_Message;
}

void P_Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    sender_ = 0;
    if (has_vi()) {
      if (vi_ != NULL) vi_->::AIT::protocols::csp::aabt::P_Assignment::Clear();
    }
    if (has_ei()) {
      if (ei_ != NULL) ei_->::AIT::protocols::csp::aabt::P_Explanation::Clear();
    }
    if (has_nogood()) {
      if (nogood_ != NULL) nogood_->::AIT::protocols::csp::aabt::P_NoGood::Clear();
    }
  }
  oi_.Clear();
  tvi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AIT.protocols.csp.aabt.P_MessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (AIT::protocols::csp::aabt::P_MessageType_IsValid(value)) {
            set_type(static_cast< AIT::protocols::csp::aabt::P_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sender;
        break;
      }
      
      // required int32 sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_)));
          set_has_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vi;
        break;
      }
      
      // optional .AIT.protocols.csp.aabt.P_Assignment vi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ei;
        break;
      }
      
      // optional .AIT.protocols.csp.aabt.P_Explanation ei = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ei()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_oi;
        break;
      }
      
      // repeated int32 oi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_oi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_oi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_oi;
        if (input->ExpectTag(48)) goto parse_tvi;
        break;
      }
      
      // repeated int32 tvi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tvi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_tvi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tvi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tvi;
        if (input->ExpectTag(58)) goto parse_nogood;
        break;
      }
      
      // optional .AIT.protocols.csp.aabt.P_NoGood nogood = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nogood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nogood()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AIT.protocols.csp.aabt.P_MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required int32 sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sender(), output);
  }
  
  // optional .AIT.protocols.csp.aabt.P_Assignment vi = 3;
  if (has_vi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vi(), output);
  }
  
  // optional .AIT.protocols.csp.aabt.P_Explanation ei = 4;
  if (has_ei()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ei(), output);
  }
  
  // repeated int32 oi = 5;
  for (int i = 0; i < this->oi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->oi(i), output);
  }
  
  // repeated int32 tvi = 6;
  for (int i = 0; i < this->tvi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->tvi(i), output);
  }
  
  // optional .AIT.protocols.csp.aabt.P_NoGood nogood = 7;
  if (has_nogood()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->nogood(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AIT.protocols.csp.aabt.P_MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required int32 sender = 2;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sender(), target);
  }
  
  // optional .AIT.protocols.csp.aabt.P_Assignment vi = 3;
  if (has_vi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vi(), target);
  }
  
  // optional .AIT.protocols.csp.aabt.P_Explanation ei = 4;
  if (has_ei()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ei(), target);
  }
  
  // repeated int32 oi = 5;
  for (int i = 0; i < this->oi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->oi(i), target);
  }
  
  // repeated int32 tvi = 6;
  for (int i = 0; i < this->tvi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->tvi(i), target);
  }
  
  // optional .AIT.protocols.csp.aabt.P_NoGood nogood = 7;
  if (has_nogood()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->nogood(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AIT.protocols.csp.aabt.P_MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required int32 sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender());
    }
    
    // optional .AIT.protocols.csp.aabt.P_Assignment vi = 3;
    if (has_vi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi());
    }
    
    // optional .AIT.protocols.csp.aabt.P_Explanation ei = 4;
    if (has_ei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ei());
    }
    
    // optional .AIT.protocols.csp.aabt.P_NoGood nogood = 7;
    if (has_nogood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nogood());
    }
    
  }
  // repeated int32 oi = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->oi_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->oi(i));
    }
    total_size += 1 * this->oi_size() + data_size;
  }
  
  // repeated int32 tvi = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->tvi_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tvi(i));
    }
    total_size += 1 * this->tvi_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_Message::MergeFrom(const P_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  oi_.MergeFrom(from.oi_);
  tvi_.MergeFrom(from.tvi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_vi()) {
      mutable_vi()->::AIT::protocols::csp::aabt::P_Assignment::MergeFrom(from.vi());
    }
    if (from.has_ei()) {
      mutable_ei()->::AIT::protocols::csp::aabt::P_Explanation::MergeFrom(from.ei());
    }
    if (from.has_nogood()) {
      mutable_nogood()->::AIT::protocols::csp::aabt::P_NoGood::MergeFrom(from.nogood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_Message::CopyFrom(const P_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_vi()) {
    if (!this->vi().IsInitialized()) return false;
  }
  if (has_ei()) {
    if (!this->ei().IsInitialized()) return false;
  }
  if (has_nogood()) {
    if (!this->nogood().IsInitialized()) return false;
  }
  return true;
}

void P_Message::Swap(P_Message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sender_, other->sender_);
    std::swap(vi_, other->vi_);
    std::swap(ei_, other->ei_);
    oi_.Swap(&other->oi_);
    tvi_.Swap(&other->tvi_);
    std::swap(nogood_, other->nogood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_Message_descriptor_;
  metadata.reflection = P_Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace aabt
}  // namespace csp
}  // namespace protocols
}  // namespace AIT

// @@protoc_insertion_point(global_scope)
