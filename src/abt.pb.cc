// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "abt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AIT {
namespace protocols {
namespace csp {
namespace abt {

namespace {

const ::google::protobuf::Descriptor* P_EndPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_EndPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_CommunicationProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_CommunicationProtocol_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_Message_OK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_Message_OK_reflection_ = NULL;
const ::google::protobuf::Descriptor* P_Message_NOGOOD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_Message_NOGOOD_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CP_MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ABT_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_abt_2eproto() {
  protobuf_AddDesc_abt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "abt.proto");
  GOOGLE_CHECK(file != NULL);
  P_EndPoint_descriptor_ = file->message_type(0);
  static const int P_EndPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_EndPoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_EndPoint, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_EndPoint, port_),
  };
  P_EndPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_EndPoint_descriptor_,
      P_EndPoint::default_instance_,
      P_EndPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_EndPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_EndPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_EndPoint));
  P_CommunicationProtocol_descriptor_ = file->message_type(1);
  static const int P_CommunicationProtocol_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CommunicationProtocol, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CommunicationProtocol, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CommunicationProtocol, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CommunicationProtocol, others_),
  };
  P_CommunicationProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_CommunicationProtocol_descriptor_,
      P_CommunicationProtocol::default_instance_,
      P_CommunicationProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CommunicationProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_CommunicationProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_CommunicationProtocol));
  P_Message_descriptor_ = file->message_type(2);
  static const int P_Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, ok_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, nogood_data_),
  };
  P_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_Message_descriptor_,
      P_Message::default_instance_,
      P_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_Message));
  P_Message_OK_descriptor_ = P_Message_descriptor_->nested_type(0);
  static const int P_Message_OK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message_OK, assignment_),
  };
  P_Message_OK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_Message_OK_descriptor_,
      P_Message_OK::default_instance_,
      P_Message_OK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message_OK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message_OK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_Message_OK));
  P_Message_NOGOOD_descriptor_ = P_Message_descriptor_->nested_type(1);
  static const int P_Message_NOGOOD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message_NOGOOD, nogood_),
  };
  P_Message_NOGOOD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_Message_NOGOOD_descriptor_,
      P_Message_NOGOOD::default_instance_,
      P_Message_NOGOOD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message_NOGOOD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P_Message_NOGOOD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P_Message_NOGOOD));
  CP_MessageType_descriptor_ = file->enum_type(0);
  ABT_MessageType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_abt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_EndPoint_descriptor_, &P_EndPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_CommunicationProtocol_descriptor_, &P_CommunicationProtocol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_Message_descriptor_, &P_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_Message_OK_descriptor_, &P_Message_OK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_Message_NOGOOD_descriptor_, &P_Message_NOGOOD::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_abt_2eproto() {
  delete P_EndPoint::default_instance_;
  delete P_EndPoint_reflection_;
  delete P_CommunicationProtocol::default_instance_;
  delete P_CommunicationProtocol_reflection_;
  delete P_Message::default_instance_;
  delete P_Message_reflection_;
  delete P_Message_OK::default_instance_;
  delete P_Message_OK_reflection_;
  delete P_Message_NOGOOD::default_instance_;
  delete P_Message_NOGOOD_reflection_;
}

void protobuf_AddDesc_abt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::AIT::protocols::csp::protobuf_AddDesc_common_2dprotocols_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tabt.proto\022\025AIT.protocols.csp.abt\032\026comm"
    "on-protocols.proto\"4\n\nP_EndPoint\022\n\n\002id\030\001"
    " \002(\005\022\014\n\004host\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\"\302\001\n\027P_C"
    "ommunicationProtocol\0223\n\004type\030\001 \002(\0162%.AIT"
    ".protocols.csp.abt.CP_MessageType\022\n\n\002id\030"
    "\002 \001(\005\0223\n\010identity\030\003 \001(\0132!.AIT.protocols."
    "csp.abt.P_EndPoint\0221\n\006others\030\004 \003(\0132!.AIT"
    ".protocols.csp.abt.P_EndPoint\"\277\002\n\tP_Mess"
    "age\0224\n\004type\030\001 \002(\0162&.AIT.protocols.csp.ab"
    "t.ABT_MessageType\022\n\n\002id\030\002 \002(\005\0224\n\007ok_data"
    "\030\003 \001(\0132#.AIT.protocols.csp.abt.P_Message"
    ".OK\022<\n\013nogood_data\030\004 \001(\0132\'.AIT.protocols"
    ".csp.abt.P_Message.NOGOOD\0329\n\002OK\0223\n\nassig"
    "nment\030\001 \002(\0132\037.AIT.protocols.csp.P_Assign"
    "ment\032A\n\006NOGOOD\0227\n\006nogood\030\001 \002(\0132\'.AIT.pro"
    "tocols.csp.P_CompoundAssignment*\247\001\n\016CP_M"
    "essageType\022\017\n\013T_INTRODUCE\020\001\022\023\n\017T_INTRODU"
    "CE_ACK\020\002\022\022\n\016T_REQUEST_LIST\020\003\022\021\n\rT_REQUES"
    "T_ACK\020\004\022\n\n\006T_LIST\020\005\022\026\n\022ERR_NO_MORE_AGENT"
    "S\020\006\022\023\n\017ERR_REPEATED_ID\020\007\022\017\n\013ERR_UNKNOWN\020"
    "\010*D\n\017ABT_MessageType\022\010\n\004T_OK\020\001\022\014\n\010T_NOGO"
    "OD\020\002\022\r\n\tT_ADDLINK\020\003\022\n\n\006T_STOP\020\004", 871);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "abt.proto", &protobuf_RegisterTypes);
  P_EndPoint::default_instance_ = new P_EndPoint();
  P_CommunicationProtocol::default_instance_ = new P_CommunicationProtocol();
  P_Message::default_instance_ = new P_Message();
  P_Message_OK::default_instance_ = new P_Message_OK();
  P_Message_NOGOOD::default_instance_ = new P_Message_NOGOOD();
  P_EndPoint::default_instance_->InitAsDefaultInstance();
  P_CommunicationProtocol::default_instance_->InitAsDefaultInstance();
  P_Message::default_instance_->InitAsDefaultInstance();
  P_Message_OK::default_instance_->InitAsDefaultInstance();
  P_Message_NOGOOD::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_abt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_abt_2eproto {
  StaticDescriptorInitializer_abt_2eproto() {
    protobuf_AddDesc_abt_2eproto();
  }
} static_descriptor_initializer_abt_2eproto_;
const ::google::protobuf::EnumDescriptor* CP_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CP_MessageType_descriptor_;
}
bool CP_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ABT_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ABT_MessageType_descriptor_;
}
bool ABT_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int P_EndPoint::kIdFieldNumber;
const int P_EndPoint::kHostFieldNumber;
const int P_EndPoint::kPortFieldNumber;
#endif  // !_MSC_VER

P_EndPoint::P_EndPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_EndPoint::InitAsDefaultInstance() {
}

P_EndPoint::P_EndPoint(const P_EndPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_EndPoint::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_EndPoint::~P_EndPoint() {
  SharedDtor();
}

void P_EndPoint::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void P_EndPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_EndPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_EndPoint_descriptor_;
}

const P_EndPoint& P_EndPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abt_2eproto();
  return *default_instance_;
}

P_EndPoint* P_EndPoint::default_instance_ = NULL;

P_EndPoint* P_EndPoint::New() const {
  return new P_EndPoint;
}

void P_EndPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_EndPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }

      // required string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_EndPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_EndPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_EndPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_EndPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_EndPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_EndPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_EndPoint::MergeFrom(const P_EndPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_EndPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_EndPoint::CopyFrom(const P_EndPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_EndPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void P_EndPoint::Swap(P_EndPoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_EndPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_EndPoint_descriptor_;
  metadata.reflection = P_EndPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int P_CommunicationProtocol::kTypeFieldNumber;
const int P_CommunicationProtocol::kIdFieldNumber;
const int P_CommunicationProtocol::kIdentityFieldNumber;
const int P_CommunicationProtocol::kOthersFieldNumber;
#endif  // !_MSC_VER

P_CommunicationProtocol::P_CommunicationProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_CommunicationProtocol::InitAsDefaultInstance() {
  identity_ = const_cast< ::AIT::protocols::csp::abt::P_EndPoint*>(&::AIT::protocols::csp::abt::P_EndPoint::default_instance());
}

P_CommunicationProtocol::P_CommunicationProtocol(const P_CommunicationProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_CommunicationProtocol::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  id_ = 0;
  identity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_CommunicationProtocol::~P_CommunicationProtocol() {
  SharedDtor();
}

void P_CommunicationProtocol::SharedDtor() {
  if (this != default_instance_) {
    delete identity_;
  }
}

void P_CommunicationProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_CommunicationProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_CommunicationProtocol_descriptor_;
}

const P_CommunicationProtocol& P_CommunicationProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abt_2eproto();
  return *default_instance_;
}

P_CommunicationProtocol* P_CommunicationProtocol::default_instance_ = NULL;

P_CommunicationProtocol* P_CommunicationProtocol::New() const {
  return new P_CommunicationProtocol;
}

void P_CommunicationProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    id_ = 0;
    if (has_identity()) {
      if (identity_ != NULL) identity_->::AIT::protocols::csp::abt::P_EndPoint::Clear();
    }
  }
  others_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_CommunicationProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AIT.protocols.csp.abt.CP_MessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AIT::protocols::csp::abt::CP_MessageType_IsValid(value)) {
            set_type(static_cast< ::AIT::protocols::csp::abt::CP_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_identity;
        break;
      }

      // optional .AIT.protocols.csp.abt.P_EndPoint identity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_others;
        break;
      }

      // repeated .AIT.protocols.csp.abt.P_EndPoint others = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_others:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_others()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_others;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_CommunicationProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AIT.protocols.csp.abt.CP_MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .AIT.protocols.csp.abt.P_EndPoint identity = 3;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->identity(), output);
  }

  // repeated .AIT.protocols.csp.abt.P_EndPoint others = 4;
  for (int i = 0; i < this->others_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->others(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_CommunicationProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AIT.protocols.csp.abt.CP_MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .AIT.protocols.csp.abt.P_EndPoint identity = 3;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->identity(), target);
  }

  // repeated .AIT.protocols.csp.abt.P_EndPoint others = 4;
  for (int i = 0; i < this->others_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->others(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_CommunicationProtocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AIT.protocols.csp.abt.CP_MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .AIT.protocols.csp.abt.P_EndPoint identity = 3;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identity());
    }

  }
  // repeated .AIT.protocols.csp.abt.P_EndPoint others = 4;
  total_size += 1 * this->others_size();
  for (int i = 0; i < this->others_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->others(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_CommunicationProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_CommunicationProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_CommunicationProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_CommunicationProtocol::MergeFrom(const P_CommunicationProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  others_.MergeFrom(from.others_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_identity()) {
      mutable_identity()->::AIT::protocols::csp::abt::P_EndPoint::MergeFrom(from.identity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_CommunicationProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_CommunicationProtocol::CopyFrom(const P_CommunicationProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_CommunicationProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_identity()) {
    if (!this->identity().IsInitialized()) return false;
  }
  for (int i = 0; i < others_size(); i++) {
    if (!this->others(i).IsInitialized()) return false;
  }
  return true;
}

void P_CommunicationProtocol::Swap(P_CommunicationProtocol* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(identity_, other->identity_);
    others_.Swap(&other->others_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_CommunicationProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_CommunicationProtocol_descriptor_;
  metadata.reflection = P_CommunicationProtocol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int P_Message_OK::kAssignmentFieldNumber;
#endif  // !_MSC_VER

P_Message_OK::P_Message_OK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_Message_OK::InitAsDefaultInstance() {
  assignment_ = const_cast< ::AIT::protocols::csp::P_Assignment*>(&::AIT::protocols::csp::P_Assignment::default_instance());
}

P_Message_OK::P_Message_OK(const P_Message_OK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_Message_OK::SharedCtor() {
  _cached_size_ = 0;
  assignment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_Message_OK::~P_Message_OK() {
  SharedDtor();
}

void P_Message_OK::SharedDtor() {
  if (this != default_instance_) {
    delete assignment_;
  }
}

void P_Message_OK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_Message_OK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_Message_OK_descriptor_;
}

const P_Message_OK& P_Message_OK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abt_2eproto();
  return *default_instance_;
}

P_Message_OK* P_Message_OK::default_instance_ = NULL;

P_Message_OK* P_Message_OK::New() const {
  return new P_Message_OK;
}

void P_Message_OK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_assignment()) {
      if (assignment_ != NULL) assignment_->::AIT::protocols::csp::P_Assignment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_Message_OK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AIT.protocols.csp.P_Assignment assignment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assignment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_Message_OK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AIT.protocols.csp.P_Assignment assignment = 1;
  if (has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assignment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_Message_OK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AIT.protocols.csp.P_Assignment assignment = 1;
  if (has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assignment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_Message_OK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AIT.protocols.csp.P_Assignment assignment = 1;
    if (has_assignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assignment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_Message_OK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_Message_OK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_Message_OK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_Message_OK::MergeFrom(const P_Message_OK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assignment()) {
      mutable_assignment()->::AIT::protocols::csp::P_Assignment::MergeFrom(from.assignment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_Message_OK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_Message_OK::CopyFrom(const P_Message_OK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_Message_OK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_assignment()) {
    if (!this->assignment().IsInitialized()) return false;
  }
  return true;
}

void P_Message_OK::Swap(P_Message_OK* other) {
  if (other != this) {
    std::swap(assignment_, other->assignment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_Message_OK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_Message_OK_descriptor_;
  metadata.reflection = P_Message_OK_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int P_Message_NOGOOD::kNogoodFieldNumber;
#endif  // !_MSC_VER

P_Message_NOGOOD::P_Message_NOGOOD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_Message_NOGOOD::InitAsDefaultInstance() {
  nogood_ = const_cast< ::AIT::protocols::csp::P_CompoundAssignment*>(&::AIT::protocols::csp::P_CompoundAssignment::default_instance());
}

P_Message_NOGOOD::P_Message_NOGOOD(const P_Message_NOGOOD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_Message_NOGOOD::SharedCtor() {
  _cached_size_ = 0;
  nogood_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_Message_NOGOOD::~P_Message_NOGOOD() {
  SharedDtor();
}

void P_Message_NOGOOD::SharedDtor() {
  if (this != default_instance_) {
    delete nogood_;
  }
}

void P_Message_NOGOOD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_Message_NOGOOD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_Message_NOGOOD_descriptor_;
}

const P_Message_NOGOOD& P_Message_NOGOOD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abt_2eproto();
  return *default_instance_;
}

P_Message_NOGOOD* P_Message_NOGOOD::default_instance_ = NULL;

P_Message_NOGOOD* P_Message_NOGOOD::New() const {
  return new P_Message_NOGOOD;
}

void P_Message_NOGOOD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nogood()) {
      if (nogood_ != NULL) nogood_->::AIT::protocols::csp::P_CompoundAssignment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_Message_NOGOOD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AIT.protocols.csp.P_CompoundAssignment nogood = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nogood()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_Message_NOGOOD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AIT.protocols.csp.P_CompoundAssignment nogood = 1;
  if (has_nogood()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nogood(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_Message_NOGOOD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AIT.protocols.csp.P_CompoundAssignment nogood = 1;
  if (has_nogood()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nogood(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_Message_NOGOOD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AIT.protocols.csp.P_CompoundAssignment nogood = 1;
    if (has_nogood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nogood());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_Message_NOGOOD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_Message_NOGOOD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_Message_NOGOOD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_Message_NOGOOD::MergeFrom(const P_Message_NOGOOD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nogood()) {
      mutable_nogood()->::AIT::protocols::csp::P_CompoundAssignment::MergeFrom(from.nogood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_Message_NOGOOD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_Message_NOGOOD::CopyFrom(const P_Message_NOGOOD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_Message_NOGOOD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_nogood()) {
    if (!this->nogood().IsInitialized()) return false;
  }
  return true;
}

void P_Message_NOGOOD::Swap(P_Message_NOGOOD* other) {
  if (other != this) {
    std::swap(nogood_, other->nogood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_Message_NOGOOD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_Message_NOGOOD_descriptor_;
  metadata.reflection = P_Message_NOGOOD_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int P_Message::kTypeFieldNumber;
const int P_Message::kIdFieldNumber;
const int P_Message::kOkDataFieldNumber;
const int P_Message::kNogoodDataFieldNumber;
#endif  // !_MSC_VER

P_Message::P_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P_Message::InitAsDefaultInstance() {
  ok_data_ = const_cast< ::AIT::protocols::csp::abt::P_Message_OK*>(&::AIT::protocols::csp::abt::P_Message_OK::default_instance());
  nogood_data_ = const_cast< ::AIT::protocols::csp::abt::P_Message_NOGOOD*>(&::AIT::protocols::csp::abt::P_Message_NOGOOD::default_instance());
}

P_Message::P_Message(const P_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P_Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  id_ = 0;
  ok_data_ = NULL;
  nogood_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P_Message::~P_Message() {
  SharedDtor();
}

void P_Message::SharedDtor() {
  if (this != default_instance_) {
    delete ok_data_;
    delete nogood_data_;
  }
}

void P_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_Message_descriptor_;
}

const P_Message& P_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abt_2eproto();
  return *default_instance_;
}

P_Message* P_Message::default_instance_ = NULL;

P_Message* P_Message::New() const {
  return new P_Message;
}

void P_Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    id_ = 0;
    if (has_ok_data()) {
      if (ok_data_ != NULL) ok_data_->::AIT::protocols::csp::abt::P_Message_OK::Clear();
    }
    if (has_nogood_data()) {
      if (nogood_data_ != NULL) nogood_data_->::AIT::protocols::csp::abt::P_Message_NOGOOD::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AIT.protocols.csp.abt.ABT_MessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AIT::protocols::csp::abt::ABT_MessageType_IsValid(value)) {
            set_type(static_cast< ::AIT::protocols::csp::abt::ABT_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ok_data;
        break;
      }

      // optional .AIT.protocols.csp.abt.P_Message.OK ok_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ok_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nogood_data;
        break;
      }

      // optional .AIT.protocols.csp.abt.P_Message.NOGOOD nogood_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nogood_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nogood_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void P_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AIT.protocols.csp.abt.ABT_MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .AIT.protocols.csp.abt.P_Message.OK ok_data = 3;
  if (has_ok_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ok_data(), output);
  }

  // optional .AIT.protocols.csp.abt.P_Message.NOGOOD nogood_data = 4;
  if (has_nogood_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nogood_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AIT.protocols.csp.abt.ABT_MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .AIT.protocols.csp.abt.P_Message.OK ok_data = 3;
  if (has_ok_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ok_data(), target);
  }

  // optional .AIT.protocols.csp.abt.P_Message.NOGOOD nogood_data = 4;
  if (has_nogood_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nogood_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AIT.protocols.csp.abt.ABT_MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .AIT.protocols.csp.abt.P_Message.OK ok_data = 3;
    if (has_ok_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ok_data());
    }

    // optional .AIT.protocols.csp.abt.P_Message.NOGOOD nogood_data = 4;
    if (has_nogood_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nogood_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P_Message::MergeFrom(const P_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ok_data()) {
      mutable_ok_data()->::AIT::protocols::csp::abt::P_Message_OK::MergeFrom(from.ok_data());
    }
    if (from.has_nogood_data()) {
      mutable_nogood_data()->::AIT::protocols::csp::abt::P_Message_NOGOOD::MergeFrom(from.nogood_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P_Message::CopyFrom(const P_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P_Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ok_data()) {
    if (!this->ok_data().IsInitialized()) return false;
  }
  if (has_nogood_data()) {
    if (!this->nogood_data().IsInitialized()) return false;
  }
  return true;
}

void P_Message::Swap(P_Message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(ok_data_, other->ok_data_);
    std::swap(nogood_data_, other->nogood_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_Message_descriptor_;
  metadata.reflection = P_Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace abt
}  // namespace csp
}  // namespace protocols
}  // namespace AIT

// @@protoc_insertion_point(global_scope)
